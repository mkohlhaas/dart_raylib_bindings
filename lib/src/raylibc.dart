// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart raylib Bindings
class RaylibC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RaylibC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RaylibC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Window-related functions
  void InitWindow(
    int width,
    int height,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _InitWindow(
      width,
      height,
      title,
    );
  }

  late final _InitWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('InitWindow');
  late final _InitWindow = _InitWindowPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Char>)>();

  void CloseWindow() {
    return _CloseWindow();
  }

  late final _CloseWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseWindow');
  late final _CloseWindow = _CloseWindowPtr.asFunction<void Function()>();

  bool WindowShouldClose() {
    return _WindowShouldClose();
  }

  late final _WindowShouldClosePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('WindowShouldClose');
  late final _WindowShouldClose =
      _WindowShouldClosePtr.asFunction<bool Function()>();

  bool IsWindowReady() {
    return _IsWindowReady();
  }

  late final _IsWindowReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowReady');
  late final _IsWindowReady = _IsWindowReadyPtr.asFunction<bool Function()>();

  bool IsWindowFullscreen() {
    return _IsWindowFullscreen();
  }

  late final _IsWindowFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFullscreen');
  late final _IsWindowFullscreen =
      _IsWindowFullscreenPtr.asFunction<bool Function()>();

  bool IsWindowHidden() {
    return _IsWindowHidden();
  }

  late final _IsWindowHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowHidden');
  late final _IsWindowHidden = _IsWindowHiddenPtr.asFunction<bool Function()>();

  bool IsWindowMinimized() {
    return _IsWindowMinimized();
  }

  late final _IsWindowMinimizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMinimized');
  late final _IsWindowMinimized =
      _IsWindowMinimizedPtr.asFunction<bool Function()>();

  bool IsWindowMaximized() {
    return _IsWindowMaximized();
  }

  late final _IsWindowMaximizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMaximized');
  late final _IsWindowMaximized =
      _IsWindowMaximizedPtr.asFunction<bool Function()>();

  bool IsWindowFocused() {
    return _IsWindowFocused();
  }

  late final _IsWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFocused');
  late final _IsWindowFocused =
      _IsWindowFocusedPtr.asFunction<bool Function()>();

  bool IsWindowResized() {
    return _IsWindowResized();
  }

  late final _IsWindowResizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowResized');
  late final _IsWindowResized =
      _IsWindowResizedPtr.asFunction<bool Function()>();

  bool IsWindowState(
    int flag,
  ) {
    return _IsWindowState(
      flag,
    );
  }

  late final _IsWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsWindowState');
  late final _IsWindowState =
      _IsWindowStatePtr.asFunction<bool Function(int)>();

  void SetWindowState(
    int flags,
  ) {
    return _SetWindowState(
      flags,
    );
  }

  late final _SetWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetWindowState');
  late final _SetWindowState =
      _SetWindowStatePtr.asFunction<void Function(int)>();

  void ClearWindowState(
    int flags,
  ) {
    return _ClearWindowState(
      flags,
    );
  }

  late final _ClearWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ClearWindowState');
  late final _ClearWindowState =
      _ClearWindowStatePtr.asFunction<void Function(int)>();

  void ToggleFullscreen() {
    return _ToggleFullscreen();
  }

  late final _ToggleFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ToggleFullscreen');
  late final _ToggleFullscreen =
      _ToggleFullscreenPtr.asFunction<void Function()>();

  void ToggleBorderlessWindowed() {
    return _ToggleBorderlessWindowed();
  }

  late final _ToggleBorderlessWindowedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ToggleBorderlessWindowed');
  late final _ToggleBorderlessWindowed =
      _ToggleBorderlessWindowedPtr.asFunction<void Function()>();

  void MaximizeWindow() {
    return _MaximizeWindow();
  }

  late final _MaximizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MaximizeWindow');
  late final _MaximizeWindow = _MaximizeWindowPtr.asFunction<void Function()>();

  void MinimizeWindow() {
    return _MinimizeWindow();
  }

  late final _MinimizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MinimizeWindow');
  late final _MinimizeWindow = _MinimizeWindowPtr.asFunction<void Function()>();

  void RestoreWindow() {
    return _RestoreWindow();
  }

  late final _RestoreWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RestoreWindow');
  late final _RestoreWindow = _RestoreWindowPtr.asFunction<void Function()>();

  void SetWindowIcon(
    RLImage image,
  ) {
    return _SetWindowIcon(
      image,
    );
  }

  late final _SetWindowIconPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLImage)>>('SetWindowIcon');
  late final _SetWindowIcon =
      _SetWindowIconPtr.asFunction<void Function(RLImage)>();

  void SetWindowIcons(
    ffi.Pointer<RLImage> images,
    int count,
  ) {
    return _SetWindowIcons(
      images,
      count,
    );
  }

  late final _SetWindowIconsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int)>>(
      'SetWindowIcons');
  late final _SetWindowIcons =
      _SetWindowIconsPtr.asFunction<void Function(ffi.Pointer<RLImage>, int)>();

  void SetWindowTitle(
    ffi.Pointer<ffi.Char> title,
  ) {
    return _SetWindowTitle(
      title,
    );
  }

  late final _SetWindowTitlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetWindowTitle');
  late final _SetWindowTitle =
      _SetWindowTitlePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetWindowPosition(
    int x,
    int y,
  ) {
    return _SetWindowPosition(
      x,
      y,
    );
  }

  late final _SetWindowPositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowPosition');
  late final _SetWindowPosition =
      _SetWindowPositionPtr.asFunction<void Function(int, int)>();

  void SetWindowMonitor(
    int monitor,
  ) {
    return _SetWindowMonitor(
      monitor,
    );
  }

  late final _SetWindowMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetWindowMonitor');
  late final _SetWindowMonitor =
      _SetWindowMonitorPtr.asFunction<void Function(int)>();

  void SetWindowMinSize(
    int width,
    int height,
  ) {
    return _SetWindowMinSize(
      width,
      height,
    );
  }

  late final _SetWindowMinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMinSize');
  late final _SetWindowMinSize =
      _SetWindowMinSizePtr.asFunction<void Function(int, int)>();

  void SetWindowMaxSize(
    int width,
    int height,
  ) {
    return _SetWindowMaxSize(
      width,
      height,
    );
  }

  late final _SetWindowMaxSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMaxSize');
  late final _SetWindowMaxSize =
      _SetWindowMaxSizePtr.asFunction<void Function(int, int)>();

  void SetWindowSize(
    int width,
    int height,
  ) {
    return _SetWindowSize(
      width,
      height,
    );
  }

  late final _SetWindowSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowSize');
  late final _SetWindowSize =
      _SetWindowSizePtr.asFunction<void Function(int, int)>();

  void SetWindowOpacity(
    double opacity,
  ) {
    return _SetWindowOpacity(
      opacity,
    );
  }

  late final _SetWindowOpacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetWindowOpacity');
  late final _SetWindowOpacity =
      _SetWindowOpacityPtr.asFunction<void Function(double)>();

  void SetWindowFocused() {
    return _SetWindowFocused();
  }

  late final _SetWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetWindowFocused');
  late final _SetWindowFocused =
      _SetWindowFocusedPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> GetWindowHandle() {
    return _GetWindowHandle();
  }

  late final _GetWindowHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'GetWindowHandle');
  late final _GetWindowHandle =
      _GetWindowHandlePtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int GetScreenWidth() {
    return _GetScreenWidth();
  }

  late final _GetScreenWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenWidth');
  late final _GetScreenWidth = _GetScreenWidthPtr.asFunction<int Function()>();

  int GetScreenHeight() {
    return _GetScreenHeight();
  }

  late final _GetScreenHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenHeight');
  late final _GetScreenHeight =
      _GetScreenHeightPtr.asFunction<int Function()>();

  int GetRenderWidth() {
    return _GetRenderWidth();
  }

  late final _GetRenderWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderWidth');
  late final _GetRenderWidth = _GetRenderWidthPtr.asFunction<int Function()>();

  int GetRenderHeight() {
    return _GetRenderHeight();
  }

  late final _GetRenderHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderHeight');
  late final _GetRenderHeight =
      _GetRenderHeightPtr.asFunction<int Function()>();

  int GetMonitorCount() {
    return _GetMonitorCount();
  }

  late final _GetMonitorCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMonitorCount');
  late final _GetMonitorCount =
      _GetMonitorCountPtr.asFunction<int Function()>();

  int GetCurrentMonitor() {
    return _GetCurrentMonitor();
  }

  late final _GetCurrentMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCurrentMonitor');
  late final _GetCurrentMonitor =
      _GetCurrentMonitorPtr.asFunction<int Function()>();

  RLVector2 GetMonitorPosition(
    int monitor,
  ) {
    return _GetMonitorPosition(
      monitor,
    );
  }

  late final _GetMonitorPositionPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function(ffi.Int)>>(
          'GetMonitorPosition');
  late final _GetMonitorPosition =
      _GetMonitorPositionPtr.asFunction<RLVector2 Function(int)>();

  int GetMonitorWidth(
    int monitor,
  ) {
    return _GetMonitorWidth(
      monitor,
    );
  }

  late final _GetMonitorWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetMonitorWidth');
  late final _GetMonitorWidth =
      _GetMonitorWidthPtr.asFunction<int Function(int)>();

  int GetMonitorHeight(
    int monitor,
  ) {
    return _GetMonitorHeight(
      monitor,
    );
  }

  late final _GetMonitorHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorHeight');
  late final _GetMonitorHeight =
      _GetMonitorHeightPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalWidth(
    int monitor,
  ) {
    return _GetMonitorPhysicalWidth(
      monitor,
    );
  }

  late final _GetMonitorPhysicalWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalWidth');
  late final _GetMonitorPhysicalWidth =
      _GetMonitorPhysicalWidthPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalHeight(
    int monitor,
  ) {
    return _GetMonitorPhysicalHeight(
      monitor,
    );
  }

  late final _GetMonitorPhysicalHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalHeight');
  late final _GetMonitorPhysicalHeight =
      _GetMonitorPhysicalHeightPtr.asFunction<int Function(int)>();

  int GetMonitorRefreshRate(
    int monitor,
  ) {
    return _GetMonitorRefreshRate(
      monitor,
    );
  }

  late final _GetMonitorRefreshRatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorRefreshRate');
  late final _GetMonitorRefreshRate =
      _GetMonitorRefreshRatePtr.asFunction<int Function(int)>();

  RLVector2 GetWindowPosition() {
    return _GetWindowPosition();
  }

  late final _GetWindowPositionPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetWindowPosition');
  late final _GetWindowPosition =
      _GetWindowPositionPtr.asFunction<RLVector2 Function()>();

  RLVector2 GetWindowScaleDPI() {
    return _GetWindowScaleDPI();
  }

  late final _GetWindowScaleDPIPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetWindowScaleDPI');
  late final _GetWindowScaleDPI =
      _GetWindowScaleDPIPtr.asFunction<RLVector2 Function()>();

  ffi.Pointer<ffi.Char> GetMonitorName(
    int monitor,
  ) {
    return _GetMonitorName(
      monitor,
    );
  }

  late final _GetMonitorNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetMonitorName');
  late final _GetMonitorName =
      _GetMonitorNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void SetClipboardText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SetClipboardText(
      text,
    );
  }

  late final _SetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetClipboardText');
  late final _SetClipboardText =
      _SetClipboardTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetClipboardText() {
    return _GetClipboardText();
  }

  late final _GetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetClipboardText');
  late final _GetClipboardText =
      _GetClipboardTextPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void EnableEventWaiting() {
    return _EnableEventWaiting();
  }

  late final _EnableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableEventWaiting');
  late final _EnableEventWaiting =
      _EnableEventWaitingPtr.asFunction<void Function()>();

  void DisableEventWaiting() {
    return _DisableEventWaiting();
  }

  late final _DisableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableEventWaiting');
  late final _DisableEventWaiting =
      _DisableEventWaitingPtr.asFunction<void Function()>();

  /// Cursor-related functions
  void ShowCursor() {
    return _ShowCursor();
  }

  late final _ShowCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ShowCursor');
  late final _ShowCursor = _ShowCursorPtr.asFunction<void Function()>();

  void HideCursor() {
    return _HideCursor();
  }

  late final _HideCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('HideCursor');
  late final _HideCursor = _HideCursorPtr.asFunction<void Function()>();

  bool IsCursorHidden() {
    return _IsCursorHidden();
  }

  late final _IsCursorHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorHidden');
  late final _IsCursorHidden = _IsCursorHiddenPtr.asFunction<bool Function()>();

  void EnableCursor() {
    return _EnableCursor();
  }

  late final _EnableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableCursor');
  late final _EnableCursor = _EnableCursorPtr.asFunction<void Function()>();

  void DisableCursor() {
    return _DisableCursor();
  }

  late final _DisableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableCursor');
  late final _DisableCursor = _DisableCursorPtr.asFunction<void Function()>();

  bool IsCursorOnScreen() {
    return _IsCursorOnScreen();
  }

  late final _IsCursorOnScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorOnScreen');
  late final _IsCursorOnScreen =
      _IsCursorOnScreenPtr.asFunction<bool Function()>();

  /// Drawing-related functions
  void ClearBackground(
    RLColor color,
  ) {
    return _ClearBackground(
      color,
    );
  }

  late final _ClearBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLColor)>>(
          'ClearBackground');
  late final _ClearBackground =
      _ClearBackgroundPtr.asFunction<void Function(RLColor)>();

  void BeginDrawing() {
    return _BeginDrawing();
  }

  late final _BeginDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('BeginDrawing');
  late final _BeginDrawing = _BeginDrawingPtr.asFunction<void Function()>();

  void EndDrawing() {
    return _EndDrawing();
  }

  late final _EndDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndDrawing');
  late final _EndDrawing = _EndDrawingPtr.asFunction<void Function()>();

  void BeginMode2D(
    RLCamera2D camera,
  ) {
    return _BeginMode2D(
      camera,
    );
  }

  late final _BeginMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLCamera2D)>>('BeginMode2D');
  late final _BeginMode2D =
      _BeginMode2DPtr.asFunction<void Function(RLCamera2D)>();

  void EndMode2D() {
    return _EndMode2D();
  }

  late final _EndMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode2D');
  late final _EndMode2D = _EndMode2DPtr.asFunction<void Function()>();

  void BeginMode3D(
    RLCamera3D camera,
  ) {
    return _BeginMode3D(
      camera,
    );
  }

  late final _BeginMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLCamera3D)>>('BeginMode3D');
  late final _BeginMode3D =
      _BeginMode3DPtr.asFunction<void Function(RLCamera3D)>();

  void EndMode3D() {
    return _EndMode3D();
  }

  late final _EndMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode3D');
  late final _EndMode3D = _EndMode3DPtr.asFunction<void Function()>();

  void BeginTextureMode(
    RLRenderTexture2D target,
  ) {
    return _BeginTextureMode(
      target,
    );
  }

  late final _BeginTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLRenderTexture2D)>>(
          'BeginTextureMode');
  late final _BeginTextureMode =
      _BeginTextureModePtr.asFunction<void Function(RLRenderTexture2D)>();

  void EndTextureMode() {
    return _EndTextureMode();
  }

  late final _EndTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndTextureMode');
  late final _EndTextureMode = _EndTextureModePtr.asFunction<void Function()>();

  void BeginShaderMode(
    RLShader shader,
  ) {
    return _BeginShaderMode(
      shader,
    );
  }

  late final _BeginShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLShader)>>(
          'BeginShaderMode');
  late final _BeginShaderMode =
      _BeginShaderModePtr.asFunction<void Function(RLShader)>();

  void EndShaderMode() {
    return _EndShaderMode();
  }

  late final _EndShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndShaderMode');
  late final _EndShaderMode = _EndShaderModePtr.asFunction<void Function()>();

  void BeginBlendMode(
    int mode,
  ) {
    return _BeginBlendMode(
      mode,
    );
  }

  late final _BeginBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('BeginBlendMode');
  late final _BeginBlendMode =
      _BeginBlendModePtr.asFunction<void Function(int)>();

  void EndBlendMode() {
    return _EndBlendMode();
  }

  late final _EndBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndBlendMode');
  late final _EndBlendMode = _EndBlendModePtr.asFunction<void Function()>();

  void BeginScissorMode(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _BeginScissorMode(
      x,
      y,
      width,
      height,
    );
  }

  late final _BeginScissorModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BeginScissorMode');
  late final _BeginScissorMode =
      _BeginScissorModePtr.asFunction<void Function(int, int, int, int)>();

  void EndScissorMode() {
    return _EndScissorMode();
  }

  late final _EndScissorModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndScissorMode');
  late final _EndScissorMode = _EndScissorModePtr.asFunction<void Function()>();

  void BeginVrStereoMode(
    RLVrStereoConfig config,
  ) {
    return _BeginVrStereoMode(
      config,
    );
  }

  late final _BeginVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLVrStereoConfig)>>(
          'BeginVrStereoMode');
  late final _BeginVrStereoMode =
      _BeginVrStereoModePtr.asFunction<void Function(RLVrStereoConfig)>();

  void EndVrStereoMode() {
    return _EndVrStereoMode();
  }

  late final _EndVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndVrStereoMode');
  late final _EndVrStereoMode =
      _EndVrStereoModePtr.asFunction<void Function()>();

  /// VR stereo config functions for VR simulator
  RLVrStereoConfig LoadVrStereoConfig(
    RLVrDeviceInfo device,
  ) {
    return _LoadVrStereoConfig(
      device,
    );
  }

  late final _LoadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<RLVrStereoConfig Function(RLVrDeviceInfo)>>(
          'LoadVrStereoConfig');
  late final _LoadVrStereoConfig = _LoadVrStereoConfigPtr.asFunction<
      RLVrStereoConfig Function(RLVrDeviceInfo)>();

  void UnloadVrStereoConfig(
    RLVrStereoConfig config,
  ) {
    return _UnloadVrStereoConfig(
      config,
    );
  }

  late final _UnloadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLVrStereoConfig)>>(
          'UnloadVrStereoConfig');
  late final _UnloadVrStereoConfig =
      _UnloadVrStereoConfigPtr.asFunction<void Function(RLVrStereoConfig)>();

  /// Shader management functions
  /// NOTE: Shader functionality is not available on OpenGL 1.1
  RLShader LoadShader(
    ffi.Pointer<ffi.Char> vsFileName,
    ffi.Pointer<ffi.Char> fsFileName,
  ) {
    return _LoadShader(
      vsFileName,
      fsFileName,
    );
  }

  late final _LoadShaderPtr = _lookup<
      ffi.NativeFunction<
          RLShader Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('LoadShader');
  late final _LoadShader = _LoadShaderPtr.asFunction<
      RLShader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  RLShader LoadShaderFromMemory(
    ffi.Pointer<ffi.Char> vsCode,
    ffi.Pointer<ffi.Char> fsCode,
  ) {
    return _LoadShaderFromMemory(
      vsCode,
      fsCode,
    );
  }

  late final _LoadShaderFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          RLShader Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LoadShaderFromMemory');
  late final _LoadShaderFromMemory = _LoadShaderFromMemoryPtr.asFunction<
      RLShader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool IsShaderReady(
    RLShader shader,
  ) {
    return _IsShaderReady(
      shader,
    );
  }

  late final _IsShaderReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLShader)>>('IsShaderReady');
  late final _IsShaderReady =
      _IsShaderReadyPtr.asFunction<bool Function(RLShader)>();

  int GetShaderLocation(
    RLShader shader,
    ffi.Pointer<ffi.Char> uniformName,
  ) {
    return _GetShaderLocation(
      shader,
      uniformName,
    );
  }

  late final _GetShaderLocationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(RLShader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocation');
  late final _GetShaderLocation = _GetShaderLocationPtr.asFunction<
      int Function(RLShader, ffi.Pointer<ffi.Char>)>();

  int GetShaderLocationAttrib(
    RLShader shader,
    ffi.Pointer<ffi.Char> attribName,
  ) {
    return _GetShaderLocationAttrib(
      shader,
      attribName,
    );
  }

  late final _GetShaderLocationAttribPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(RLShader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocationAttrib');
  late final _GetShaderLocationAttrib = _GetShaderLocationAttribPtr.asFunction<
      int Function(RLShader, ffi.Pointer<ffi.Char>)>();

  void SetShaderValue(
    RLShader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
  ) {
    return _SetShaderValue(
      shader,
      locIndex,
      value,
      uniformType,
    );
  }

  late final _SetShaderValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLShader, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SetShaderValue');
  late final _SetShaderValue = _SetShaderValuePtr.asFunction<
      void Function(RLShader, int, ffi.Pointer<ffi.Void>, int)>();

  void SetShaderValueV(
    RLShader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
    int count,
  ) {
    return _SetShaderValueV(
      shader,
      locIndex,
      value,
      uniformType,
      count,
    );
  }

  late final _SetShaderValueVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLShader, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('SetShaderValueV');
  late final _SetShaderValueV = _SetShaderValueVPtr.asFunction<
      void Function(RLShader, int, ffi.Pointer<ffi.Void>, int, int)>();

  void SetShaderValueMatrix(
    RLShader shader,
    int locIndex,
    RLMatrix mat,
  ) {
    return _SetShaderValueMatrix(
      shader,
      locIndex,
      mat,
    );
  }

  late final _SetShaderValueMatrixPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLShader, ffi.Int, RLMatrix)>>(
      'SetShaderValueMatrix');
  late final _SetShaderValueMatrix = _SetShaderValueMatrixPtr.asFunction<
      void Function(RLShader, int, RLMatrix)>();

  void SetShaderValueTexture(
    RLShader shader,
    int locIndex,
    RLTexture2D texture,
  ) {
    return _SetShaderValueTexture(
      shader,
      locIndex,
      texture,
    );
  }

  late final _SetShaderValueTexturePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(RLShader, ffi.Int, RLTexture2D)>>(
      'SetShaderValueTexture');
  late final _SetShaderValueTexture = _SetShaderValueTexturePtr.asFunction<
      void Function(RLShader, int, RLTexture2D)>();

  void UnloadShader(
    RLShader shader,
  ) {
    return _UnloadShader(
      shader,
    );
  }

  late final _UnloadShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLShader)>>('UnloadShader');
  late final _UnloadShader =
      _UnloadShaderPtr.asFunction<void Function(RLShader)>();

  /// Screen-space-related functions
  RLRay GetMouseRay(
    RLVector2 mousePosition,
    RLCamera camera,
  ) {
    return _GetMouseRay(
      mousePosition,
      camera,
    );
  }

  late final _GetMouseRayPtr =
      _lookup<ffi.NativeFunction<RLRay Function(RLVector2, RLCamera)>>(
          'GetMouseRay');
  late final _GetMouseRay =
      _GetMouseRayPtr.asFunction<RLRay Function(RLVector2, RLCamera)>();

  RLMatrix GetCameraMatrix(
    RLCamera camera,
  ) {
    return _GetCameraMatrix(
      camera,
    );
  }

  late final _GetCameraMatrixPtr =
      _lookup<ffi.NativeFunction<RLMatrix Function(RLCamera)>>(
          'GetCameraMatrix');
  late final _GetCameraMatrix =
      _GetCameraMatrixPtr.asFunction<RLMatrix Function(RLCamera)>();

  RLMatrix GetCameraMatrix2D(
    RLCamera2D camera,
  ) {
    return _GetCameraMatrix2D(
      camera,
    );
  }

  late final _GetCameraMatrix2DPtr =
      _lookup<ffi.NativeFunction<RLMatrix Function(RLCamera2D)>>(
          'GetCameraMatrix2D');
  late final _GetCameraMatrix2D =
      _GetCameraMatrix2DPtr.asFunction<RLMatrix Function(RLCamera2D)>();

  RLVector2 GetWorldToScreen(
    RLVector3 position,
    RLCamera camera,
  ) {
    return _GetWorldToScreen(
      position,
      camera,
    );
  }

  late final _GetWorldToScreenPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function(RLVector3, RLCamera)>>(
          'GetWorldToScreen');
  late final _GetWorldToScreen = _GetWorldToScreenPtr.asFunction<
      RLVector2 Function(RLVector3, RLCamera)>();

  RLVector2 GetScreenToWorld2D(
    RLVector2 position,
    RLCamera2D camera,
  ) {
    return _GetScreenToWorld2D(
      position,
      camera,
    );
  }

  late final _GetScreenToWorld2DPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function(RLVector2, RLCamera2D)>>(
          'GetScreenToWorld2D');
  late final _GetScreenToWorld2D = _GetScreenToWorld2DPtr.asFunction<
      RLVector2 Function(RLVector2, RLCamera2D)>();

  RLVector2 GetWorldToScreenEx(
    RLVector3 position,
    RLCamera camera,
    int width,
    int height,
  ) {
    return _GetWorldToScreenEx(
      position,
      camera,
      width,
      height,
    );
  }

  late final _GetWorldToScreenExPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(
              RLVector3, RLCamera, ffi.Int, ffi.Int)>>('GetWorldToScreenEx');
  late final _GetWorldToScreenEx = _GetWorldToScreenExPtr.asFunction<
      RLVector2 Function(RLVector3, RLCamera, int, int)>();

  RLVector2 GetWorldToScreen2D(
    RLVector2 position,
    RLCamera2D camera,
  ) {
    return _GetWorldToScreen2D(
      position,
      camera,
    );
  }

  late final _GetWorldToScreen2DPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function(RLVector2, RLCamera2D)>>(
          'GetWorldToScreen2D');
  late final _GetWorldToScreen2D = _GetWorldToScreen2DPtr.asFunction<
      RLVector2 Function(RLVector2, RLCamera2D)>();

  /// Timing-related functions
  void SetTargetFPS(
    int fps,
  ) {
    return _SetTargetFPS(
      fps,
    );
  }

  late final _SetTargetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetTargetFPS');
  late final _SetTargetFPS = _SetTargetFPSPtr.asFunction<void Function(int)>();

  double GetFrameTime() {
    return _GetFrameTime();
  }

  late final _GetFrameTimePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetFrameTime');
  late final _GetFrameTime = _GetFrameTimePtr.asFunction<double Function()>();

  double GetTime() {
    return _GetTime();
  }

  late final _GetTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetTime');
  late final _GetTime = _GetTimePtr.asFunction<double Function()>();

  int GetFPS() {
    return _GetFPS();
  }

  late final _GetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetFPS');
  late final _GetFPS = _GetFPSPtr.asFunction<int Function()>();

  /// Custom frame control functions
  /// NOTE: Those functions are intended for advance users that want full control over the frame processing
  /// By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timing + PollInputEvents()
  /// To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL
  void SwapScreenBuffer() {
    return _SwapScreenBuffer();
  }

  late final _SwapScreenBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SwapScreenBuffer');
  late final _SwapScreenBuffer =
      _SwapScreenBufferPtr.asFunction<void Function()>();

  void PollInputEvents() {
    return _PollInputEvents();
  }

  late final _PollInputEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PollInputEvents');
  late final _PollInputEvents =
      _PollInputEventsPtr.asFunction<void Function()>();

  void WaitTime(
    double seconds,
  ) {
    return _WaitTime(
      seconds,
    );
  }

  late final _WaitTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>('WaitTime');
  late final _WaitTime = _WaitTimePtr.asFunction<void Function(double)>();

  /// Random values generation functions
  void SetRandomSeed(
    int seed,
  ) {
    return _SetRandomSeed(
      seed,
    );
  }

  late final _SetRandomSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetRandomSeed');
  late final _SetRandomSeed =
      _SetRandomSeedPtr.asFunction<void Function(int)>();

  int GetRandomValue(
    int min,
    int max,
  ) {
    return _GetRandomValue(
      min,
      max,
    );
  }

  late final _GetRandomValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'GetRandomValue');
  late final _GetRandomValue =
      _GetRandomValuePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> LoadRandomSequence(
    int count,
    int min,
    int max,
  ) {
    return _LoadRandomSequence(
      count,
      min,
      max,
    );
  }

  late final _LoadRandomSequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.UnsignedInt, ffi.Int, ffi.Int)>>('LoadRandomSequence');
  late final _LoadRandomSequence = _LoadRandomSequencePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(int, int, int)>();

  void UnloadRandomSequence(
    ffi.Pointer<ffi.Int> sequence,
  ) {
    return _UnloadRandomSequence(
      sequence,
    );
  }

  late final _UnloadRandomSequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadRandomSequence');
  late final _UnloadRandomSequence = _UnloadRandomSequencePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>)>();

  /// Misc. functions
  void TakeScreenshot(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _TakeScreenshot(
      fileName,
    );
  }

  late final _TakeScreenshotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'TakeScreenshot');
  late final _TakeScreenshot =
      _TakeScreenshotPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetConfigFlags(
    int flags,
  ) {
    return _SetConfigFlags(
      flags,
    );
  }

  late final _SetConfigFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetConfigFlags');
  late final _SetConfigFlags =
      _SetConfigFlagsPtr.asFunction<void Function(int)>();

  void OpenURL(
    ffi.Pointer<ffi.Char> url,
  ) {
    return _OpenURL(
      url,
    );
  }

  late final _OpenURLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'OpenURL');
  late final _OpenURL =
      _OpenURLPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// NOTE: Following functions implemented in module [utils]
  /// ------------------------------------------------------------------
  void TraceLog(
    int logLevel,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TraceLog(
      logLevel,
      text,
    );
  }

  late final _TraceLogPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'TraceLog');
  late final _TraceLog =
      _TraceLogPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void SetTraceLogLevel(
    int logLevel,
  ) {
    return _SetTraceLogLevel(
      logLevel,
    );
  }

  late final _SetTraceLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTraceLogLevel');
  late final _SetTraceLogLevel =
      _SetTraceLogLevelPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Void> MemAlloc(
    int size,
  ) {
    return _MemAlloc(
      size,
    );
  }

  late final _MemAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.UnsignedInt)>>(
      'MemAlloc');
  late final _MemAlloc =
      _MemAllocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> MemRealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _MemRealloc(
      ptr,
      size,
    );
  }

  late final _MemReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('MemRealloc');
  late final _MemRealloc = _MemReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void MemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MemFree(
      ptr,
    );
  }

  late final _MemFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MemFree');
  late final _MemFree =
      _MemFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Set custom callbacks
  /// WARNING: Callbacks setup is intended for advance users
  void SetTraceLogCallback(
    TraceLogCallback callback,
  ) {
    return _SetTraceLogCallback(
      callback,
    );
  }

  late final _SetTraceLogCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TraceLogCallback)>>(
          'SetTraceLogCallback');
  late final _SetTraceLogCallback =
      _SetTraceLogCallbackPtr.asFunction<void Function(TraceLogCallback)>();

  void SetLoadFileDataCallback(
    LoadFileDataCallback callback,
  ) {
    return _SetLoadFileDataCallback(
      callback,
    );
  }

  late final _SetLoadFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileDataCallback)>>(
          'SetLoadFileDataCallback');
  late final _SetLoadFileDataCallback = _SetLoadFileDataCallbackPtr.asFunction<
      void Function(LoadFileDataCallback)>();

  void SetSaveFileDataCallback(
    SaveFileDataCallback callback,
  ) {
    return _SetSaveFileDataCallback(
      callback,
    );
  }

  late final _SetSaveFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileDataCallback)>>(
          'SetSaveFileDataCallback');
  late final _SetSaveFileDataCallback = _SetSaveFileDataCallbackPtr.asFunction<
      void Function(SaveFileDataCallback)>();

  void SetLoadFileTextCallback(
    LoadFileTextCallback callback,
  ) {
    return _SetLoadFileTextCallback(
      callback,
    );
  }

  late final _SetLoadFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileTextCallback)>>(
          'SetLoadFileTextCallback');
  late final _SetLoadFileTextCallback = _SetLoadFileTextCallbackPtr.asFunction<
      void Function(LoadFileTextCallback)>();

  void SetSaveFileTextCallback(
    SaveFileTextCallback callback,
  ) {
    return _SetSaveFileTextCallback(
      callback,
    );
  }

  late final _SetSaveFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileTextCallback)>>(
          'SetSaveFileTextCallback');
  late final _SetSaveFileTextCallback = _SetSaveFileTextCallbackPtr.asFunction<
      void Function(SaveFileTextCallback)>();

  /// Files management functions
  ffi.Pointer<ffi.UnsignedChar> LoadFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _LoadFileData(
      fileName,
      dataSize,
    );
  }

  late final _LoadFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadFileData');
  late final _LoadFileData = _LoadFileDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadFileData(
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _UnloadFileData(
      data,
    );
  }

  late final _UnloadFileDataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'UnloadFileData');
  late final _UnloadFileData = _UnloadFileDataPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  bool SaveFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
  ) {
    return _SaveFileData(
      fileName,
      data,
      dataSize,
    );
  }

  late final _SaveFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SaveFileData');
  late final _SaveFileData = _SaveFileDataPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  bool ExportDataAsCode(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportDataAsCode(
      data,
      dataSize,
      fileName,
    );
  }

  late final _ExportDataAsCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ExportDataAsCode');
  late final _ExportDataAsCode = _ExportDataAsCodePtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LoadFileText(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFileText(
      fileName,
    );
  }

  late final _LoadFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LoadFileText');
  late final _LoadFileText = _LoadFileTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void UnloadFileText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadFileText(
      text,
    );
  }

  late final _UnloadFileTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadFileText');
  late final _UnloadFileText =
      _UnloadFileTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  bool SaveFileText(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SaveFileText(
      fileName,
      text,
    );
  }

  late final _SaveFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('SaveFileText');
  late final _SaveFileText = _SaveFileTextPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// File system functions
  bool FileExists(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _FileExists(
      fileName,
    );
  }

  late final _FileExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'FileExists');
  late final _FileExists =
      _FileExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool DirectoryExists(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _DirectoryExists(
      dirPath,
    );
  }

  late final _DirectoryExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'DirectoryExists');
  late final _DirectoryExists =
      _DirectoryExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsFileExtension(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> ext,
  ) {
    return _IsFileExtension(
      fileName,
      ext,
    );
  }

  late final _IsFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IsFileExtension');
  late final _IsFileExtension = _IsFileExtensionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int GetFileLength(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileLength(
      fileName,
    );
  }

  late final _GetFileLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileLength');
  late final _GetFileLength =
      _GetFileLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileExtension(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileExtension(
      fileName,
    );
  }

  late final _GetFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileExtension');
  late final _GetFileExtension = _GetFileExtensionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileName(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileName(
      filePath,
    );
  }

  late final _GetFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileName');
  late final _GetFileName = _GetFileNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileNameWithoutExt(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileNameWithoutExt(
      filePath,
    );
  }

  late final _GetFileNameWithoutExtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileNameWithoutExt');
  late final _GetFileNameWithoutExt = _GetFileNameWithoutExtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetDirectoryPath(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetDirectoryPath(
      filePath,
    );
  }

  late final _GetDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetDirectoryPath');
  late final _GetDirectoryPath = _GetDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetPrevDirectoryPath(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _GetPrevDirectoryPath(
      dirPath,
    );
  }

  late final _GetPrevDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetPrevDirectoryPath');
  late final _GetPrevDirectoryPath = _GetPrevDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetWorkingDirectory() {
    return _GetWorkingDirectory();
  }

  late final _GetWorkingDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetWorkingDirectory');
  late final _GetWorkingDirectory =
      _GetWorkingDirectoryPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetApplicationDirectory() {
    return _GetApplicationDirectory();
  }

  late final _GetApplicationDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetApplicationDirectory');
  late final _GetApplicationDirectory = _GetApplicationDirectoryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  bool ChangeDirectory(
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _ChangeDirectory(
      dir,
    );
  }

  late final _ChangeDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'ChangeDirectory');
  late final _ChangeDirectory =
      _ChangeDirectoryPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsPathFile(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IsPathFile(
      path,
    );
  }

  late final _IsPathFilePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'IsPathFile');
  late final _IsPathFile =
      _IsPathFilePtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  RLFilePathList LoadDirectoryFiles(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _LoadDirectoryFiles(
      dirPath,
    );
  }

  late final _LoadDirectoryFilesPtr = _lookup<
          ffi.NativeFunction<RLFilePathList Function(ffi.Pointer<ffi.Char>)>>(
      'LoadDirectoryFiles');
  late final _LoadDirectoryFiles = _LoadDirectoryFilesPtr.asFunction<
      RLFilePathList Function(ffi.Pointer<ffi.Char>)>();

  RLFilePathList LoadDirectoryFilesEx(
    ffi.Pointer<ffi.Char> basePath,
    ffi.Pointer<ffi.Char> filter,
    bool scanSubdirs,
  ) {
    return _LoadDirectoryFilesEx(
      basePath,
      filter,
      scanSubdirs,
    );
  }

  late final _LoadDirectoryFilesExPtr = _lookup<
      ffi.NativeFunction<
          RLFilePathList Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('LoadDirectoryFilesEx');
  late final _LoadDirectoryFilesEx = _LoadDirectoryFilesExPtr.asFunction<
      RLFilePathList Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  void UnloadDirectoryFiles(
    RLFilePathList files,
  ) {
    return _UnloadDirectoryFiles(
      files,
    );
  }

  late final _UnloadDirectoryFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLFilePathList)>>(
          'UnloadDirectoryFiles');
  late final _UnloadDirectoryFiles =
      _UnloadDirectoryFilesPtr.asFunction<void Function(RLFilePathList)>();

  bool IsFileDropped() {
    return _IsFileDropped();
  }

  late final _IsFileDroppedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsFileDropped');
  late final _IsFileDropped = _IsFileDroppedPtr.asFunction<bool Function()>();

  RLFilePathList LoadDroppedFiles() {
    return _LoadDroppedFiles();
  }

  late final _LoadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<RLFilePathList Function()>>(
          'LoadDroppedFiles');
  late final _LoadDroppedFiles =
      _LoadDroppedFilesPtr.asFunction<RLFilePathList Function()>();

  void UnloadDroppedFiles(
    RLFilePathList files,
  ) {
    return _UnloadDroppedFiles(
      files,
    );
  }

  late final _UnloadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLFilePathList)>>(
          'UnloadDroppedFiles');
  late final _UnloadDroppedFiles =
      _UnloadDroppedFilesPtr.asFunction<void Function(RLFilePathList)>();

  int GetFileModTime(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileModTime(
      fileName,
    );
  }

  late final _GetFileModTimePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileModTime');
  late final _GetFileModTime =
      _GetFileModTimePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Compression/Encoding functionality
  ffi.Pointer<ffi.UnsignedChar> CompressData(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> compDataSize,
  ) {
    return _CompressData(
      data,
      dataSize,
      compDataSize,
    );
  }

  late final _CompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CompressData');
  late final _CompressData = _CompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecompressData(
    ffi.Pointer<ffi.UnsignedChar> compData,
    int compDataSize,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _DecompressData(
      compData,
      compDataSize,
      dataSize,
    );
  }

  late final _DecompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('DecompressData');
  late final _DecompressData = _DecompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> EncodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _EncodeDataBase64(
      data,
      dataSize,
      outputSize,
    );
  }

  late final _EncodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('EncodeDataBase64');
  late final _EncodeDataBase64 = _EncodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _DecodeDataBase64(
      data,
      outputSize,
    );
  }

  late final _DecodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('DecodeDataBase64');
  late final _DecodeDataBase64 = _DecodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// Automation events functionality
  RLAutomationEventList LoadAutomationEventList(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadAutomationEventList(
      fileName,
    );
  }

  late final _LoadAutomationEventListPtr = _lookup<
      ffi.NativeFunction<
          RLAutomationEventList Function(
              ffi.Pointer<ffi.Char>)>>('LoadAutomationEventList');
  late final _LoadAutomationEventList = _LoadAutomationEventListPtr.asFunction<
      RLAutomationEventList Function(ffi.Pointer<ffi.Char>)>();

  void UnloadAutomationEventList(
    ffi.Pointer<RLAutomationEventList> list,
  ) {
    return _UnloadAutomationEventList(
      list,
    );
  }

  late final _UnloadAutomationEventListPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<RLAutomationEventList>)>>(
      'UnloadAutomationEventList');
  late final _UnloadAutomationEventList = _UnloadAutomationEventListPtr
      .asFunction<void Function(ffi.Pointer<RLAutomationEventList>)>();

  bool ExportAutomationEventList(
    RLAutomationEventList list,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportAutomationEventList(
      list,
      fileName,
    );
  }

  late final _ExportAutomationEventListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLAutomationEventList,
              ffi.Pointer<ffi.Char>)>>('ExportAutomationEventList');
  late final _ExportAutomationEventList =
      _ExportAutomationEventListPtr.asFunction<
          bool Function(RLAutomationEventList, ffi.Pointer<ffi.Char>)>();

  void SetAutomationEventList(
    ffi.Pointer<RLAutomationEventList> list,
  ) {
    return _SetAutomationEventList(
      list,
    );
  }

  late final _SetAutomationEventListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLAutomationEventList>)>>('SetAutomationEventList');
  late final _SetAutomationEventList = _SetAutomationEventListPtr.asFunction<
      void Function(ffi.Pointer<RLAutomationEventList>)>();

  void SetAutomationEventBaseFrame(
    int frame,
  ) {
    return _SetAutomationEventBaseFrame(
      frame,
    );
  }

  late final _SetAutomationEventBaseFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAutomationEventBaseFrame');
  late final _SetAutomationEventBaseFrame =
      _SetAutomationEventBaseFramePtr.asFunction<void Function(int)>();

  void StartAutomationEventRecording() {
    return _StartAutomationEventRecording();
  }

  late final _StartAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StartAutomationEventRecording');
  late final _StartAutomationEventRecording =
      _StartAutomationEventRecordingPtr.asFunction<void Function()>();

  void StopAutomationEventRecording() {
    return _StopAutomationEventRecording();
  }

  late final _StopAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StopAutomationEventRecording');
  late final _StopAutomationEventRecording =
      _StopAutomationEventRecordingPtr.asFunction<void Function()>();

  void PlayAutomationEvent(
    RLAutomationEvent event,
  ) {
    return _PlayAutomationEvent(
      event,
    );
  }

  late final _PlayAutomationEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAutomationEvent)>>(
          'PlayAutomationEvent');
  late final _PlayAutomationEvent =
      _PlayAutomationEventPtr.asFunction<void Function(RLAutomationEvent)>();

  /// Input-related functions: keyboard
  bool IsKeyPressed(
    int key,
  ) {
    return _IsKeyPressed(
      key,
    );
  }

  late final _IsKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyPressed');
  late final _IsKeyPressed = _IsKeyPressedPtr.asFunction<bool Function(int)>();

  bool IsKeyPressedRepeat(
    int key,
  ) {
    return _IsKeyPressedRepeat(
      key,
    );
  }

  late final _IsKeyPressedRepeatPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsKeyPressedRepeat');
  late final _IsKeyPressedRepeat =
      _IsKeyPressedRepeatPtr.asFunction<bool Function(int)>();

  bool IsKeyDown(
    int key,
  ) {
    return _IsKeyDown(
      key,
    );
  }

  late final _IsKeyDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyDown');
  late final _IsKeyDown = _IsKeyDownPtr.asFunction<bool Function(int)>();

  bool IsKeyReleased(
    int key,
  ) {
    return _IsKeyReleased(
      key,
    );
  }

  late final _IsKeyReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyReleased');
  late final _IsKeyReleased =
      _IsKeyReleasedPtr.asFunction<bool Function(int)>();

  bool IsKeyUp(
    int key,
  ) {
    return _IsKeyUp(
      key,
    );
  }

  late final _IsKeyUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyUp');
  late final _IsKeyUp = _IsKeyUpPtr.asFunction<bool Function(int)>();

  int GetKeyPressed() {
    return _GetKeyPressed();
  }

  late final _GetKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetKeyPressed');
  late final _GetKeyPressed = _GetKeyPressedPtr.asFunction<int Function()>();

  int GetCharPressed() {
    return _GetCharPressed();
  }

  late final _GetCharPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCharPressed');
  late final _GetCharPressed = _GetCharPressedPtr.asFunction<int Function()>();

  void SetExitKey(
    int key,
  ) {
    return _SetExitKey(
      key,
    );
  }

  late final _SetExitKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetExitKey');
  late final _SetExitKey = _SetExitKeyPtr.asFunction<void Function(int)>();

  /// Input-related functions: gamepads
  bool IsGamepadAvailable(
    int gamepad,
  ) {
    return _IsGamepadAvailable(
      gamepad,
    );
  }

  late final _IsGamepadAvailablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsGamepadAvailable');
  late final _IsGamepadAvailable =
      _IsGamepadAvailablePtr.asFunction<bool Function(int)>();

  ffi.Pointer<ffi.Char> GetGamepadName(
    int gamepad,
  ) {
    return _GetGamepadName(
      gamepad,
    );
  }

  late final _GetGamepadNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetGamepadName');
  late final _GetGamepadName =
      _GetGamepadNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool IsGamepadButtonPressed(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonPressed(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonPressed');
  late final _IsGamepadButtonPressed =
      _IsGamepadButtonPressedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonDown(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonDown(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonDown');
  late final _IsGamepadButtonDown =
      _IsGamepadButtonDownPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonReleased(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonReleased(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonReleased');
  late final _IsGamepadButtonReleased =
      _IsGamepadButtonReleasedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonUp(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonUp(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonUp');
  late final _IsGamepadButtonUp =
      _IsGamepadButtonUpPtr.asFunction<bool Function(int, int)>();

  int GetGamepadButtonPressed() {
    return _GetGamepadButtonPressed();
  }

  late final _GetGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'GetGamepadButtonPressed');
  late final _GetGamepadButtonPressed =
      _GetGamepadButtonPressedPtr.asFunction<int Function()>();

  int GetGamepadAxisCount(
    int gamepad,
  ) {
    return _GetGamepadAxisCount(
      gamepad,
    );
  }

  late final _GetGamepadAxisCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetGamepadAxisCount');
  late final _GetGamepadAxisCount =
      _GetGamepadAxisCountPtr.asFunction<int Function(int)>();

  double GetGamepadAxisMovement(
    int gamepad,
    int axis,
  ) {
    return _GetGamepadAxisMovement(
      gamepad,
      axis,
    );
  }

  late final _GetGamepadAxisMovementPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'GetGamepadAxisMovement');
  late final _GetGamepadAxisMovement =
      _GetGamepadAxisMovementPtr.asFunction<double Function(int, int)>();

  int SetGamepadMappings(
    ffi.Pointer<ffi.Char> mappings,
  ) {
    return _SetGamepadMappings(
      mappings,
    );
  }

  late final _SetGamepadMappingsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'SetGamepadMappings');
  late final _SetGamepadMappings =
      _SetGamepadMappingsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Input-related functions: mouse
  bool IsMouseButtonPressed(
    int button,
  ) {
    return _IsMouseButtonPressed(
      button,
    );
  }

  late final _IsMouseButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonPressed');
  late final _IsMouseButtonPressed =
      _IsMouseButtonPressedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonDown(
    int button,
  ) {
    return _IsMouseButtonDown(
      button,
    );
  }

  late final _IsMouseButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonDown');
  late final _IsMouseButtonDown =
      _IsMouseButtonDownPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonReleased(
    int button,
  ) {
    return _IsMouseButtonReleased(
      button,
    );
  }

  late final _IsMouseButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonReleased');
  late final _IsMouseButtonReleased =
      _IsMouseButtonReleasedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonUp(
    int button,
  ) {
    return _IsMouseButtonUp(
      button,
    );
  }

  late final _IsMouseButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonUp');
  late final _IsMouseButtonUp =
      _IsMouseButtonUpPtr.asFunction<bool Function(int)>();

  int GetMouseX() {
    return _GetMouseX();
  }

  late final _GetMouseXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseX');
  late final _GetMouseX = _GetMouseXPtr.asFunction<int Function()>();

  int GetMouseY() {
    return _GetMouseY();
  }

  late final _GetMouseYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseY');
  late final _GetMouseY = _GetMouseYPtr.asFunction<int Function()>();

  RLVector2 GetMousePosition() {
    return _GetMousePosition();
  }

  late final _GetMousePositionPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetMousePosition');
  late final _GetMousePosition =
      _GetMousePositionPtr.asFunction<RLVector2 Function()>();

  RLVector2 GetMouseDelta() {
    return _GetMouseDelta();
  }

  late final _GetMouseDeltaPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetMouseDelta');
  late final _GetMouseDelta =
      _GetMouseDeltaPtr.asFunction<RLVector2 Function()>();

  void SetMousePosition(
    int x,
    int y,
  ) {
    return _SetMousePosition(
      x,
      y,
    );
  }

  late final _SetMousePositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMousePosition');
  late final _SetMousePosition =
      _SetMousePositionPtr.asFunction<void Function(int, int)>();

  void SetMouseOffset(
    int offsetX,
    int offsetY,
  ) {
    return _SetMouseOffset(
      offsetX,
      offsetY,
    );
  }

  late final _SetMouseOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMouseOffset');
  late final _SetMouseOffset =
      _SetMouseOffsetPtr.asFunction<void Function(int, int)>();

  void SetMouseScale(
    double scaleX,
    double scaleY,
  ) {
    return _SetMouseScale(
      scaleX,
      scaleY,
    );
  }

  late final _SetMouseScalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'SetMouseScale');
  late final _SetMouseScale =
      _SetMouseScalePtr.asFunction<void Function(double, double)>();

  double GetMouseWheelMove() {
    return _GetMouseWheelMove();
  }

  late final _GetMouseWheelMovePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMouseWheelMove');
  late final _GetMouseWheelMove =
      _GetMouseWheelMovePtr.asFunction<double Function()>();

  RLVector2 GetMouseWheelMoveV() {
    return _GetMouseWheelMoveV();
  }

  late final _GetMouseWheelMoveVPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetMouseWheelMoveV');
  late final _GetMouseWheelMoveV =
      _GetMouseWheelMoveVPtr.asFunction<RLVector2 Function()>();

  void SetMouseCursor(
    int cursor,
  ) {
    return _SetMouseCursor(
      cursor,
    );
  }

  late final _SetMouseCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetMouseCursor');
  late final _SetMouseCursor =
      _SetMouseCursorPtr.asFunction<void Function(int)>();

  /// Input-related functions: touch
  int GetTouchX() {
    return _GetTouchX();
  }

  late final _GetTouchXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchX');
  late final _GetTouchX = _GetTouchXPtr.asFunction<int Function()>();

  int GetTouchY() {
    return _GetTouchY();
  }

  late final _GetTouchYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchY');
  late final _GetTouchY = _GetTouchYPtr.asFunction<int Function()>();

  RLVector2 GetTouchPosition(
    int index,
  ) {
    return _GetTouchPosition(
      index,
    );
  }

  late final _GetTouchPositionPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function(ffi.Int)>>(
          'GetTouchPosition');
  late final _GetTouchPosition =
      _GetTouchPositionPtr.asFunction<RLVector2 Function(int)>();

  int GetTouchPointId(
    int index,
  ) {
    return _GetTouchPointId(
      index,
    );
  }

  late final _GetTouchPointIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetTouchPointId');
  late final _GetTouchPointId =
      _GetTouchPointIdPtr.asFunction<int Function(int)>();

  int GetTouchPointCount() {
    return _GetTouchPointCount();
  }

  late final _GetTouchPointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchPointCount');
  late final _GetTouchPointCount =
      _GetTouchPointCountPtr.asFunction<int Function()>();

  /// ------------------------------------------------------------------------------------
  /// Gestures and Touch Handling Functions (Module: rgestures)
  /// ------------------------------------------------------------------------------------
  void SetGesturesEnabled(
    int flags,
  ) {
    return _SetGesturesEnabled(
      flags,
    );
  }

  late final _SetGesturesEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetGesturesEnabled');
  late final _SetGesturesEnabled =
      _SetGesturesEnabledPtr.asFunction<void Function(int)>();

  bool IsGestureDetected(
    int gesture,
  ) {
    return _IsGestureDetected(
      gesture,
    );
  }

  late final _IsGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsGestureDetected');
  late final _IsGestureDetected =
      _IsGestureDetectedPtr.asFunction<bool Function(int)>();

  int GetGestureDetected() {
    return _GetGestureDetected();
  }

  late final _GetGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetGestureDetected');
  late final _GetGestureDetected =
      _GetGestureDetectedPtr.asFunction<int Function()>();

  double GetGestureHoldDuration() {
    return _GetGestureHoldDuration();
  }

  late final _GetGestureHoldDurationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'GetGestureHoldDuration');
  late final _GetGestureHoldDuration =
      _GetGestureHoldDurationPtr.asFunction<double Function()>();

  RLVector2 GetGestureDragVector() {
    return _GetGestureDragVector();
  }

  late final _GetGestureDragVectorPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>('GetGestureDragVector');
  late final _GetGestureDragVector =
      _GetGestureDragVectorPtr.asFunction<RLVector2 Function()>();

  double GetGestureDragAngle() {
    return _GetGestureDragAngle();
  }

  late final _GetGestureDragAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGestureDragAngle');
  late final _GetGestureDragAngle =
      _GetGestureDragAnglePtr.asFunction<double Function()>();

  RLVector2 GetGesturePinchVector() {
    return _GetGesturePinchVector();
  }

  late final _GetGesturePinchVectorPtr =
      _lookup<ffi.NativeFunction<RLVector2 Function()>>(
          'GetGesturePinchVector');
  late final _GetGesturePinchVector =
      _GetGesturePinchVectorPtr.asFunction<RLVector2 Function()>();

  double GetGesturePinchAngle() {
    return _GetGesturePinchAngle();
  }

  late final _GetGesturePinchAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGesturePinchAngle');
  late final _GetGesturePinchAngle =
      _GetGesturePinchAnglePtr.asFunction<double Function()>();

  /// ------------------------------------------------------------------------------------
  /// Camera System Functions (Module: rcamera)
  /// ------------------------------------------------------------------------------------
  void UpdateCamera(
    ffi.Pointer<RLCamera> camera,
    int mode,
  ) {
    return _UpdateCamera(
      camera,
      mode,
    );
  }

  late final _UpdateCameraPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<RLCamera>, ffi.Int)>>(
      'UpdateCamera');
  late final _UpdateCamera =
      _UpdateCameraPtr.asFunction<void Function(ffi.Pointer<RLCamera>, int)>();

  void UpdateCameraPro(
    ffi.Pointer<RLCamera> camera,
    RLVector3 movement,
    RLVector3 rotation,
    double zoom,
  ) {
    return _UpdateCameraPro(
      camera,
      movement,
      rotation,
      zoom,
    );
  }

  late final _UpdateCameraProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLCamera>, RLVector3, RLVector3,
              ffi.Float)>>('UpdateCameraPro');
  late final _UpdateCameraPro = _UpdateCameraProPtr.asFunction<
      void Function(ffi.Pointer<RLCamera>, RLVector3, RLVector3, double)>();

  /// ------------------------------------------------------------------------------------
  /// Basic Shapes Drawing Functions (Module: shapes)
  /// ------------------------------------------------------------------------------------
  /// Set texture and rectangle to be used on shapes drawing
  /// NOTE: It can be useful when using basic shapes and one single font,
  /// defining a font char white rectangle would allow drawing everything in a single draw call
  void SetShapesTexture(
    RLTexture2D texture,
    RLRectangle source,
  ) {
    return _SetShapesTexture(
      texture,
      source,
    );
  }

  late final _SetShapesTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLTexture2D, RLRectangle)>>(
          'SetShapesTexture');
  late final _SetShapesTexture = _SetShapesTexturePtr.asFunction<
      void Function(RLTexture2D, RLRectangle)>();

  /// Basic shapes drawing functions
  void DrawPixel(
    int posX,
    int posY,
    RLColor color,
  ) {
    return _DrawPixel(
      posX,
      posY,
      color,
    );
  }

  late final _DrawPixelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, RLColor)>>(
          'DrawPixel');
  late final _DrawPixel =
      _DrawPixelPtr.asFunction<void Function(int, int, RLColor)>();

  void DrawPixelV(
    RLVector2 position,
    RLColor color,
  ) {
    return _DrawPixelV(
      position,
      color,
    );
  }

  late final _DrawPixelVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLVector2, RLColor)>>(
          'DrawPixelV');
  late final _DrawPixelV =
      _DrawPixelVPtr.asFunction<void Function(RLVector2, RLColor)>();

  void DrawLine(
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    RLColor color,
  ) {
    return _DrawLine(
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _DrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, RLColor)>>('DrawLine');
  late final _DrawLine =
      _DrawLinePtr.asFunction<void Function(int, int, int, int, RLColor)>();

  void DrawLineV(
    RLVector2 startPos,
    RLVector2 endPos,
    RLColor color,
  ) {
    return _DrawLineV(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLineVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector2, RLVector2, RLColor)>>(
      'DrawLineV');
  late final _DrawLineV =
      _DrawLineVPtr.asFunction<void Function(RLVector2, RLVector2, RLColor)>();

  void DrawLineEx(
    RLVector2 startPos,
    RLVector2 endPos,
    double thick,
    RLColor color,
  ) {
    return _DrawLineEx(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector2, RLVector2, ffi.Float, RLColor)>>('DrawLineEx');
  late final _DrawLineEx = _DrawLineExPtr.asFunction<
      void Function(RLVector2, RLVector2, double, RLColor)>();

  void DrawLineStrip(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    RLColor color,
  ) {
    return _DrawLineStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawLineStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLVector2>, ffi.Int, RLColor)>>('DrawLineStrip');
  late final _DrawLineStrip = _DrawLineStripPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, RLColor)>();

  void DrawLineBezier(
    RLVector2 startPos,
    RLVector2 endPos,
    double thick,
    RLColor color,
  ) {
    return _DrawLineBezier(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector2, RLVector2, ffi.Float, RLColor)>>('DrawLineBezier');
  late final _DrawLineBezier = _DrawLineBezierPtr.asFunction<
      void Function(RLVector2, RLVector2, double, RLColor)>();

  void DrawCircle(
    int centerX,
    int centerY,
    double radius,
    RLColor color,
  ) {
    return _DrawCircle(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, RLColor)>>('DrawCircle');
  late final _DrawCircle =
      _DrawCirclePtr.asFunction<void Function(int, int, double, RLColor)>();

  void DrawCircleSector(
    RLVector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    RLColor color,
  ) {
    return _DrawCircleSector(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCircleSector');
  late final _DrawCircleSector = _DrawCircleSectorPtr.asFunction<
      void Function(RLVector2, double, double, double, int, RLColor)>();

  void DrawCircleSectorLines(
    RLVector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    RLColor color,
  ) {
    return _DrawCircleSectorLines(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCircleSectorLines');
  late final _DrawCircleSectorLines = _DrawCircleSectorLinesPtr.asFunction<
      void Function(RLVector2, double, double, double, int, RLColor)>();

  void DrawCircleGradient(
    int centerX,
    int centerY,
    double radius,
    RLColor color1,
    RLColor color2,
  ) {
    return _DrawCircleGradient(
      centerX,
      centerY,
      radius,
      color1,
      color2,
    );
  }

  late final _DrawCircleGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, RLColor,
              RLColor)>>('DrawCircleGradient');
  late final _DrawCircleGradient = _DrawCircleGradientPtr.asFunction<
      void Function(int, int, double, RLColor, RLColor)>();

  void DrawCircleV(
    RLVector2 center,
    double radius,
    RLColor color,
  ) {
    return _DrawCircleV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector2, ffi.Float, RLColor)>>(
      'DrawCircleV');
  late final _DrawCircleV =
      _DrawCircleVPtr.asFunction<void Function(RLVector2, double, RLColor)>();

  void DrawCircleLines(
    int centerX,
    int centerY,
    double radius,
    RLColor color,
  ) {
    return _DrawCircleLines(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, RLColor)>>('DrawCircleLines');
  late final _DrawCircleLines = _DrawCircleLinesPtr.asFunction<
      void Function(int, int, double, RLColor)>();

  void DrawCircleLinesV(
    RLVector2 center,
    double radius,
    RLColor color,
  ) {
    return _DrawCircleLinesV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector2, ffi.Float, RLColor)>>(
      'DrawCircleLinesV');
  late final _DrawCircleLinesV = _DrawCircleLinesVPtr.asFunction<
      void Function(RLVector2, double, RLColor)>();

  void DrawEllipse(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    RLColor color,
  ) {
    return _DrawEllipse(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, ffi.Float, RLColor)>>('DrawEllipse');
  late final _DrawEllipse = _DrawEllipsePtr.asFunction<
      void Function(int, int, double, double, RLColor)>();

  void DrawEllipseLines(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    RLColor color,
  ) {
    return _DrawEllipseLines(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipseLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, ffi.Float,
              RLColor)>>('DrawEllipseLines');
  late final _DrawEllipseLines = _DrawEllipseLinesPtr.asFunction<
      void Function(int, int, double, double, RLColor)>();

  void DrawRing(
    RLVector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    RLColor color,
  ) {
    return _DrawRing(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Float, ffi.Float, ffi.Float,
              ffi.Float, ffi.Int, RLColor)>>('DrawRing');
  late final _DrawRing = _DrawRingPtr.asFunction<
      void Function(RLVector2, double, double, double, double, int, RLColor)>();

  void DrawRingLines(
    RLVector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    RLColor color,
  ) {
    return _DrawRingLines(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Float, ffi.Float, ffi.Float,
              ffi.Float, ffi.Int, RLColor)>>('DrawRingLines');
  late final _DrawRingLines = _DrawRingLinesPtr.asFunction<
      void Function(RLVector2, double, double, double, double, int, RLColor)>();

  void DrawRectangle(
    int posX,
    int posY,
    int width,
    int height,
    RLColor color,
  ) {
    return _DrawRectangle(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, RLColor)>>('DrawRectangle');
  late final _DrawRectangle = _DrawRectanglePtr.asFunction<
      void Function(int, int, int, int, RLColor)>();

  void DrawRectangleV(
    RLVector2 position,
    RLVector2 size,
    RLColor color,
  ) {
    return _DrawRectangleV(
      position,
      size,
      color,
    );
  }

  late final _DrawRectangleVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector2, RLVector2, RLColor)>>(
      'DrawRectangleV');
  late final _DrawRectangleV = _DrawRectangleVPtr.asFunction<
      void Function(RLVector2, RLVector2, RLColor)>();

  void DrawRectangleRec(
    RLRectangle rec,
    RLColor color,
  ) {
    return _DrawRectangleRec(
      rec,
      color,
    );
  }

  late final _DrawRectangleRecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLRectangle, RLColor)>>(
          'DrawRectangleRec');
  late final _DrawRectangleRec =
      _DrawRectangleRecPtr.asFunction<void Function(RLRectangle, RLColor)>();

  void DrawRectanglePro(
    RLRectangle rec,
    RLVector2 origin,
    double rotation,
    RLColor color,
  ) {
    return _DrawRectanglePro(
      rec,
      origin,
      rotation,
      color,
    );
  }

  late final _DrawRectangleProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLRectangle, RLVector2, ffi.Float, RLColor)>>('DrawRectanglePro');
  late final _DrawRectanglePro = _DrawRectangleProPtr.asFunction<
      void Function(RLRectangle, RLVector2, double, RLColor)>();

  void DrawRectangleGradientV(
    int posX,
    int posY,
    int width,
    int height,
    RLColor color1,
    RLColor color2,
  ) {
    return _DrawRectangleGradientV(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, RLColor,
              RLColor)>>('DrawRectangleGradientV');
  late final _DrawRectangleGradientV = _DrawRectangleGradientVPtr.asFunction<
      void Function(int, int, int, int, RLColor, RLColor)>();

  void DrawRectangleGradientH(
    int posX,
    int posY,
    int width,
    int height,
    RLColor color1,
    RLColor color2,
  ) {
    return _DrawRectangleGradientH(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, RLColor,
              RLColor)>>('DrawRectangleGradientH');
  late final _DrawRectangleGradientH = _DrawRectangleGradientHPtr.asFunction<
      void Function(int, int, int, int, RLColor, RLColor)>();

  void DrawRectangleGradientEx(
    RLRectangle rec,
    RLColor col1,
    RLColor col2,
    RLColor col3,
    RLColor col4,
  ) {
    return _DrawRectangleGradientEx(
      rec,
      col1,
      col2,
      col3,
      col4,
    );
  }

  late final _DrawRectangleGradientExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLRectangle, RLColor, RLColor, RLColor,
              RLColor)>>('DrawRectangleGradientEx');
  late final _DrawRectangleGradientEx = _DrawRectangleGradientExPtr.asFunction<
      void Function(RLRectangle, RLColor, RLColor, RLColor, RLColor)>();

  void DrawRectangleLines(
    int posX,
    int posY,
    int width,
    int height,
    RLColor color,
  ) {
    return _DrawRectangleLines(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              RLColor)>>('DrawRectangleLines');
  late final _DrawRectangleLines = _DrawRectangleLinesPtr.asFunction<
      void Function(int, int, int, int, RLColor)>();

  void DrawRectangleLinesEx(
    RLRectangle rec,
    double lineThick,
    RLColor color,
  ) {
    return _DrawRectangleLinesEx(
      rec,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleLinesExPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(RLRectangle, ffi.Float, RLColor)>>(
      'DrawRectangleLinesEx');
  late final _DrawRectangleLinesEx = _DrawRectangleLinesExPtr.asFunction<
      void Function(RLRectangle, double, RLColor)>();

  void DrawRectangleRounded(
    RLRectangle rec,
    double roundness,
    int segments,
    RLColor color,
  ) {
    return _DrawRectangleRounded(
      rec,
      roundness,
      segments,
      color,
    );
  }

  late final _DrawRectangleRoundedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLRectangle, ffi.Float, ffi.Int,
              RLColor)>>('DrawRectangleRounded');
  late final _DrawRectangleRounded = _DrawRectangleRoundedPtr.asFunction<
      void Function(RLRectangle, double, int, RLColor)>();

  void DrawRectangleRoundedLines(
    RLRectangle rec,
    double roundness,
    int segments,
    double lineThick,
    RLColor color,
  ) {
    return _DrawRectangleRoundedLines(
      rec,
      roundness,
      segments,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleRoundedLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLRectangle, ffi.Float, ffi.Int, ffi.Float,
              RLColor)>>('DrawRectangleRoundedLines');
  late final _DrawRectangleRoundedLines = _DrawRectangleRoundedLinesPtr
      .asFunction<void Function(RLRectangle, double, int, double, RLColor)>();

  void DrawTriangle(
    RLVector2 v1,
    RLVector2 v2,
    RLVector2 v3,
    RLColor color,
  ) {
    return _DrawTriangle(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector2, RLVector2, RLVector2, RLColor)>>('DrawTriangle');
  late final _DrawTriangle = _DrawTrianglePtr.asFunction<
      void Function(RLVector2, RLVector2, RLVector2, RLColor)>();

  void DrawTriangleLines(
    RLVector2 v1,
    RLVector2 v2,
    RLVector2 v3,
    RLColor color,
  ) {
    return _DrawTriangleLines(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector2, RLVector2, RLVector2, RLColor)>>('DrawTriangleLines');
  late final _DrawTriangleLines = _DrawTriangleLinesPtr.asFunction<
      void Function(RLVector2, RLVector2, RLVector2, RLColor)>();

  void DrawTriangleFan(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    RLColor color,
  ) {
    return _DrawTriangleFan(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleFanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLVector2>, ffi.Int, RLColor)>>('DrawTriangleFan');
  late final _DrawTriangleFan = _DrawTriangleFanPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, RLColor)>();

  void DrawTriangleStrip(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    RLColor color,
  ) {
    return _DrawTriangleStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLVector2>, ffi.Int, RLColor)>>('DrawTriangleStrip');
  late final _DrawTriangleStrip = _DrawTriangleStripPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, RLColor)>();

  void DrawPoly(
    RLVector2 center,
    int sides,
    double radius,
    double rotation,
    RLColor color,
  ) {
    return _DrawPoly(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector2, ffi.Int, ffi.Float, ffi.Float, RLColor)>>('DrawPoly');
  late final _DrawPoly = _DrawPolyPtr.asFunction<
      void Function(RLVector2, int, double, double, RLColor)>();

  void DrawPolyLines(
    RLVector2 center,
    int sides,
    double radius,
    double rotation,
    RLColor color,
  ) {
    return _DrawPolyLines(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Int, ffi.Float, ffi.Float,
              RLColor)>>('DrawPolyLines');
  late final _DrawPolyLines = _DrawPolyLinesPtr.asFunction<
      void Function(RLVector2, int, double, double, RLColor)>();

  void DrawPolyLinesEx(
    RLVector2 center,
    int sides,
    double radius,
    double rotation,
    double lineThick,
    RLColor color,
  ) {
    return _DrawPolyLinesEx(
      center,
      sides,
      radius,
      rotation,
      lineThick,
      color,
    );
  }

  late final _DrawPolyLinesExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, ffi.Int, ffi.Float, ffi.Float, ffi.Float,
              RLColor)>>('DrawPolyLinesEx');
  late final _DrawPolyLinesEx = _DrawPolyLinesExPtr.asFunction<
      void Function(RLVector2, int, double, double, double, RLColor)>();

  /// Splines drawing functions
  void DrawSplineLinear(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineLinear(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector2>, ffi.Int, ffi.Float,
              RLColor)>>('DrawSplineLinear');
  late final _DrawSplineLinear = _DrawSplineLinearPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, double, RLColor)>();

  void DrawSplineBasis(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineBasis(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector2>, ffi.Int, ffi.Float,
              RLColor)>>('DrawSplineBasis');
  late final _DrawSplineBasis = _DrawSplineBasisPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, double, RLColor)>();

  void DrawSplineCatmullRom(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineCatmullRom(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector2>, ffi.Int, ffi.Float,
              RLColor)>>('DrawSplineCatmullRom');
  late final _DrawSplineCatmullRom = _DrawSplineCatmullRomPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, double, RLColor)>();

  void DrawSplineBezierQuadratic(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineBezierQuadratic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector2>, ffi.Int, ffi.Float,
              RLColor)>>('DrawSplineBezierQuadratic');
  late final _DrawSplineBezierQuadratic =
      _DrawSplineBezierQuadraticPtr.asFunction<
          void Function(ffi.Pointer<RLVector2>, int, double, RLColor)>();

  void DrawSplineBezierCubic(
    ffi.Pointer<RLVector2> points,
    int pointCount,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineBezierCubic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector2>, ffi.Int, ffi.Float,
              RLColor)>>('DrawSplineBezierCubic');
  late final _DrawSplineBezierCubic = _DrawSplineBezierCubicPtr.asFunction<
      void Function(ffi.Pointer<RLVector2>, int, double, RLColor)>();

  void DrawSplineSegmentLinear(
    RLVector2 p1,
    RLVector2 p2,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineSegmentLinear(
      p1,
      p2,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, RLVector2, ffi.Float,
              RLColor)>>('DrawSplineSegmentLinear');
  late final _DrawSplineSegmentLinear = _DrawSplineSegmentLinearPtr.asFunction<
      void Function(RLVector2, RLVector2, double, RLColor)>();

  void DrawSplineSegmentBasis(
    RLVector2 p1,
    RLVector2 p2,
    RLVector2 p3,
    RLVector2 p4,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineSegmentBasis(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float, RLColor)>>('DrawSplineSegmentBasis');
  late final _DrawSplineSegmentBasis = _DrawSplineSegmentBasisPtr.asFunction<
      void Function(
          RLVector2, RLVector2, RLVector2, RLVector2, double, RLColor)>();

  void DrawSplineSegmentCatmullRom(
    RLVector2 p1,
    RLVector2 p2,
    RLVector2 p3,
    RLVector2 p4,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineSegmentCatmullRom(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float, RLColor)>>('DrawSplineSegmentCatmullRom');
  late final _DrawSplineSegmentCatmullRom =
      _DrawSplineSegmentCatmullRomPtr.asFunction<
          void Function(
              RLVector2, RLVector2, RLVector2, RLVector2, double, RLColor)>();

  void DrawSplineSegmentBezierQuadratic(
    RLVector2 p1,
    RLVector2 c2,
    RLVector2 p3,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineSegmentBezierQuadratic(
      p1,
      c2,
      p3,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, RLVector2, RLVector2, ffi.Float,
              RLColor)>>('DrawSplineSegmentBezierQuadratic');
  late final _DrawSplineSegmentBezierQuadratic =
      _DrawSplineSegmentBezierQuadraticPtr.asFunction<
          void Function(RLVector2, RLVector2, RLVector2, double, RLColor)>();

  void DrawSplineSegmentBezierCubic(
    RLVector2 p1,
    RLVector2 c2,
    RLVector2 c3,
    RLVector2 p4,
    double thick,
    RLColor color,
  ) {
    return _DrawSplineSegmentBezierCubic(
      p1,
      c2,
      c3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float, RLColor)>>('DrawSplineSegmentBezierCubic');
  late final _DrawSplineSegmentBezierCubic =
      _DrawSplineSegmentBezierCubicPtr.asFunction<
          void Function(
              RLVector2, RLVector2, RLVector2, RLVector2, double, RLColor)>();

  /// Spline segment point evaluation functions, for a given t [0.0f .. 1.0f]
  RLVector2 GetSplinePointLinear(
    RLVector2 startPos,
    RLVector2 endPos,
    double t,
  ) {
    return _GetSplinePointLinear(
      startPos,
      endPos,
      t,
    );
  }

  late final _GetSplinePointLinearPtr = _lookup<
          ffi
          .NativeFunction<RLVector2 Function(RLVector2, RLVector2, ffi.Float)>>(
      'GetSplinePointLinear');
  late final _GetSplinePointLinear = _GetSplinePointLinearPtr.asFunction<
      RLVector2 Function(RLVector2, RLVector2, double)>();

  RLVector2 GetSplinePointBasis(
    RLVector2 p1,
    RLVector2 p2,
    RLVector2 p3,
    RLVector2 p4,
    double t,
  ) {
    return _GetSplinePointBasis(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBasisPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float)>>('GetSplinePointBasis');
  late final _GetSplinePointBasis = _GetSplinePointBasisPtr.asFunction<
      RLVector2 Function(RLVector2, RLVector2, RLVector2, RLVector2, double)>();

  RLVector2 GetSplinePointCatmullRom(
    RLVector2 p1,
    RLVector2 p2,
    RLVector2 p3,
    RLVector2 p4,
    double t,
  ) {
    return _GetSplinePointCatmullRom(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float)>>('GetSplinePointCatmullRom');
  late final _GetSplinePointCatmullRom =
      _GetSplinePointCatmullRomPtr.asFunction<
          RLVector2 Function(
              RLVector2, RLVector2, RLVector2, RLVector2, double)>();

  RLVector2 GetSplinePointBezierQuad(
    RLVector2 p1,
    RLVector2 c2,
    RLVector2 p3,
    double t,
  ) {
    return _GetSplinePointBezierQuad(
      p1,
      c2,
      p3,
      t,
    );
  }

  late final _GetSplinePointBezierQuadPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(RLVector2, RLVector2, RLVector2,
              ffi.Float)>>('GetSplinePointBezierQuad');
  late final _GetSplinePointBezierQuad =
      _GetSplinePointBezierQuadPtr.asFunction<
          RLVector2 Function(RLVector2, RLVector2, RLVector2, double)>();

  RLVector2 GetSplinePointBezierCubic(
    RLVector2 p1,
    RLVector2 c2,
    RLVector2 c3,
    RLVector2 p4,
    double t,
  ) {
    return _GetSplinePointBezierCubic(
      p1,
      c2,
      c3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Float)>>('GetSplinePointBezierCubic');
  late final _GetSplinePointBezierCubic =
      _GetSplinePointBezierCubicPtr.asFunction<
          RLVector2 Function(
              RLVector2, RLVector2, RLVector2, RLVector2, double)>();

  /// Basic shapes collision detection functions
  bool CheckCollisionRecs(
    RLRectangle rec1,
    RLRectangle rec2,
  ) {
    return _CheckCollisionRecs(
      rec1,
      rec2,
    );
  }

  late final _CheckCollisionRecsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLRectangle, RLRectangle)>>(
          'CheckCollisionRecs');
  late final _CheckCollisionRecs = _CheckCollisionRecsPtr.asFunction<
      bool Function(RLRectangle, RLRectangle)>();

  bool CheckCollisionCircles(
    RLVector2 center1,
    double radius1,
    RLVector2 center2,
    double radius2,
  ) {
    return _CheckCollisionCircles(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector2, ffi.Float, RLVector2,
              ffi.Float)>>('CheckCollisionCircles');
  late final _CheckCollisionCircles = _CheckCollisionCirclesPtr.asFunction<
      bool Function(RLVector2, double, RLVector2, double)>();

  bool CheckCollisionCircleRec(
    RLVector2 center,
    double radius,
    RLRectangle rec,
  ) {
    return _CheckCollisionCircleRec(
      center,
      radius,
      rec,
    );
  }

  late final _CheckCollisionCircleRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              RLVector2, ffi.Float, RLRectangle)>>('CheckCollisionCircleRec');
  late final _CheckCollisionCircleRec = _CheckCollisionCircleRecPtr.asFunction<
      bool Function(RLVector2, double, RLRectangle)>();

  bool CheckCollisionPointRec(
    RLVector2 point,
    RLRectangle rec,
  ) {
    return _CheckCollisionPointRec(
      point,
      rec,
    );
  }

  late final _CheckCollisionPointRecPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLVector2, RLRectangle)>>(
          'CheckCollisionPointRec');
  late final _CheckCollisionPointRec = _CheckCollisionPointRecPtr.asFunction<
      bool Function(RLVector2, RLRectangle)>();

  bool CheckCollisionPointCircle(
    RLVector2 point,
    RLVector2 center,
    double radius,
  ) {
    return _CheckCollisionPointCircle(
      point,
      center,
      radius,
    );
  }

  late final _CheckCollisionPointCirclePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(RLVector2, RLVector2, ffi.Float)>>(
      'CheckCollisionPointCircle');
  late final _CheckCollisionPointCircle = _CheckCollisionPointCirclePtr
      .asFunction<bool Function(RLVector2, RLVector2, double)>();

  bool CheckCollisionPointTriangle(
    RLVector2 point,
    RLVector2 p1,
    RLVector2 p2,
    RLVector2 p3,
  ) {
    return _CheckCollisionPointTriangle(
      point,
      p1,
      p2,
      p3,
    );
  }

  late final _CheckCollisionPointTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector2, RLVector2, RLVector2,
              RLVector2)>>('CheckCollisionPointTriangle');
  late final _CheckCollisionPointTriangle = _CheckCollisionPointTrianglePtr
      .asFunction<bool Function(RLVector2, RLVector2, RLVector2, RLVector2)>();

  bool CheckCollisionPointPoly(
    RLVector2 point,
    ffi.Pointer<RLVector2> points,
    int pointCount,
  ) {
    return _CheckCollisionPointPoly(
      point,
      points,
      pointCount,
    );
  }

  late final _CheckCollisionPointPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector2, ffi.Pointer<RLVector2>,
              ffi.Int)>>('CheckCollisionPointPoly');
  late final _CheckCollisionPointPoly = _CheckCollisionPointPolyPtr.asFunction<
      bool Function(RLVector2, ffi.Pointer<RLVector2>, int)>();

  bool CheckCollisionLines(
    RLVector2 startPos1,
    RLVector2 endPos1,
    RLVector2 startPos2,
    RLVector2 endPos2,
    ffi.Pointer<RLVector2> collisionPoint,
  ) {
    return _CheckCollisionLines(
      startPos1,
      endPos1,
      startPos2,
      endPos2,
      collisionPoint,
    );
  }

  late final _CheckCollisionLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector2, RLVector2, RLVector2, RLVector2,
              ffi.Pointer<RLVector2>)>>('CheckCollisionLines');
  late final _CheckCollisionLines = _CheckCollisionLinesPtr.asFunction<
      bool Function(RLVector2, RLVector2, RLVector2, RLVector2,
          ffi.Pointer<RLVector2>)>();

  bool CheckCollisionPointLine(
    RLVector2 point,
    RLVector2 p1,
    RLVector2 p2,
    int threshold,
  ) {
    return _CheckCollisionPointLine(
      point,
      p1,
      p2,
      threshold,
    );
  }

  late final _CheckCollisionPointLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector2, RLVector2, RLVector2,
              ffi.Int)>>('CheckCollisionPointLine');
  late final _CheckCollisionPointLine = _CheckCollisionPointLinePtr.asFunction<
      bool Function(RLVector2, RLVector2, RLVector2, int)>();

  RLRectangle GetCollisionRec(
    RLRectangle rec1,
    RLRectangle rec2,
  ) {
    return _GetCollisionRec(
      rec1,
      rec2,
    );
  }

  late final _GetCollisionRecPtr = _lookup<
          ffi.NativeFunction<RLRectangle Function(RLRectangle, RLRectangle)>>(
      'GetCollisionRec');
  late final _GetCollisionRec = _GetCollisionRecPtr.asFunction<
      RLRectangle Function(RLRectangle, RLRectangle)>();

  /// Image loading functions
  /// NOTE: These functions do not require GPU access
  RLImage LoadImage(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadImage(
      fileName,
    );
  }

  late final _LoadImagePtr =
      _lookup<ffi.NativeFunction<RLImage Function(ffi.Pointer<ffi.Char>)>>(
          'LoadImage');
  late final _LoadImage =
      _LoadImagePtr.asFunction<RLImage Function(ffi.Pointer<ffi.Char>)>();

  RLImage LoadImageRaw(
    ffi.Pointer<ffi.Char> fileName,
    int width,
    int height,
    int format,
    int headerSize,
  ) {
    return _LoadImageRaw(
      fileName,
      width,
      height,
      format,
      headerSize,
    );
  }

  late final _LoadImageRawPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('LoadImageRaw');
  late final _LoadImageRaw = _LoadImageRawPtr.asFunction<
      RLImage Function(ffi.Pointer<ffi.Char>, int, int, int, int)>();

  RLImage LoadImageSvg(
    ffi.Pointer<ffi.Char> fileNameOrString,
    int width,
    int height,
  ) {
    return _LoadImageSvg(
      fileNameOrString,
      width,
      height,
    );
  }

  late final _LoadImageSvgPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('LoadImageSvg');
  late final _LoadImageSvg = _LoadImageSvgPtr.asFunction<
      RLImage Function(ffi.Pointer<ffi.Char>, int, int)>();

  RLImage LoadImageAnim(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> frames,
  ) {
    return _LoadImageAnim(
      fileName,
      frames,
    );
  }

  late final _LoadImageAnimPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadImageAnim');
  late final _LoadImageAnim = _LoadImageAnimPtr.asFunction<
      RLImage Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  RLImage LoadImageFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadImageFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadImageFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadImageFromMemory');
  late final _LoadImageFromMemory = _LoadImageFromMemoryPtr.asFunction<
      RLImage Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  RLImage LoadImageFromTexture(
    RLTexture2D texture,
  ) {
    return _LoadImageFromTexture(
      texture,
    );
  }

  late final _LoadImageFromTexturePtr =
      _lookup<ffi.NativeFunction<RLImage Function(RLTexture2D)>>(
          'LoadImageFromTexture');
  late final _LoadImageFromTexture =
      _LoadImageFromTexturePtr.asFunction<RLImage Function(RLTexture2D)>();

  RLImage LoadImageFromScreen() {
    return _LoadImageFromScreen();
  }

  late final _LoadImageFromScreenPtr =
      _lookup<ffi.NativeFunction<RLImage Function()>>('LoadImageFromScreen');
  late final _LoadImageFromScreen =
      _LoadImageFromScreenPtr.asFunction<RLImage Function()>();

  bool IsImageReady(
    RLImage image,
  ) {
    return _IsImageReady(
      image,
    );
  }

  late final _IsImageReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLImage)>>('IsImageReady');
  late final _IsImageReady =
      _IsImageReadyPtr.asFunction<bool Function(RLImage)>();

  void UnloadImage(
    RLImage image,
  ) {
    return _UnloadImage(
      image,
    );
  }

  late final _UnloadImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLImage)>>('UnloadImage');
  late final _UnloadImage =
      _UnloadImagePtr.asFunction<void Function(RLImage)>();

  bool ExportImage(
    RLImage image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImage(
      image,
      fileName,
    );
  }

  late final _ExportImagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(RLImage, ffi.Pointer<ffi.Char>)>>(
      'ExportImage');
  late final _ExportImage = _ExportImagePtr.asFunction<
      bool Function(RLImage, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> ExportImageToMemory(
    RLImage image,
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.Int> fileSize,
  ) {
    return _ExportImageToMemory(
      image,
      fileType,
      fileSize,
    );
  }

  late final _ExportImageToMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(RLImage, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('ExportImageToMemory');
  late final _ExportImageToMemory = _ExportImageToMemoryPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          RLImage, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  bool ExportImageAsCode(
    RLImage image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImageAsCode(
      image,
      fileName,
    );
  }

  late final _ExportImageAsCodePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(RLImage, ffi.Pointer<ffi.Char>)>>(
      'ExportImageAsCode');
  late final _ExportImageAsCode = _ExportImageAsCodePtr.asFunction<
      bool Function(RLImage, ffi.Pointer<ffi.Char>)>();

  /// Image generation functions
  RLImage GenImageColor(
    int width,
    int height,
    RLColor color,
  ) {
    return _GenImageColor(
      width,
      height,
      color,
    );
  }

  late final _GenImageColorPtr =
      _lookup<ffi.NativeFunction<RLImage Function(ffi.Int, ffi.Int, RLColor)>>(
          'GenImageColor');
  late final _GenImageColor =
      _GenImageColorPtr.asFunction<RLImage Function(int, int, RLColor)>();

  RLImage GenImageGradientLinear(
    int width,
    int height,
    int direction,
    RLColor start,
    RLColor end,
  ) {
    return _GenImageGradientLinear(
      width,
      height,
      direction,
      start,
      end,
    );
  }

  late final _GenImageGradientLinearPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Int, ffi.Int, ffi.Int, RLColor,
              RLColor)>>('GenImageGradientLinear');
  late final _GenImageGradientLinear = _GenImageGradientLinearPtr.asFunction<
      RLImage Function(int, int, int, RLColor, RLColor)>();

  RLImage GenImageGradientRadial(
    int width,
    int height,
    double density,
    RLColor inner,
    RLColor outer,
  ) {
    return _GenImageGradientRadial(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientRadialPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Int, ffi.Int, ffi.Float, RLColor,
              RLColor)>>('GenImageGradientRadial');
  late final _GenImageGradientRadial = _GenImageGradientRadialPtr.asFunction<
      RLImage Function(int, int, double, RLColor, RLColor)>();

  RLImage GenImageGradientSquare(
    int width,
    int height,
    double density,
    RLColor inner,
    RLColor outer,
  ) {
    return _GenImageGradientSquare(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientSquarePtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Int, ffi.Int, ffi.Float, RLColor,
              RLColor)>>('GenImageGradientSquare');
  late final _GenImageGradientSquare = _GenImageGradientSquarePtr.asFunction<
      RLImage Function(int, int, double, RLColor, RLColor)>();

  RLImage GenImageChecked(
    int width,
    int height,
    int checksX,
    int checksY,
    RLColor col1,
    RLColor col2,
  ) {
    return _GenImageChecked(
      width,
      height,
      checksX,
      checksY,
      col1,
      col2,
    );
  }

  late final _GenImageCheckedPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, RLColor,
              RLColor)>>('GenImageChecked');
  late final _GenImageChecked = _GenImageCheckedPtr.asFunction<
      RLImage Function(int, int, int, int, RLColor, RLColor)>();

  RLImage GenImageWhiteNoise(
    int width,
    int height,
    double factor,
  ) {
    return _GenImageWhiteNoise(
      width,
      height,
      factor,
    );
  }

  late final _GenImageWhiteNoisePtr = _lookup<
          ffi.NativeFunction<RLImage Function(ffi.Int, ffi.Int, ffi.Float)>>(
      'GenImageWhiteNoise');
  late final _GenImageWhiteNoise =
      _GenImageWhiteNoisePtr.asFunction<RLImage Function(int, int, double)>();

  RLImage GenImagePerlinNoise(
    int width,
    int height,
    int offsetX,
    int offsetY,
    double scale,
  ) {
    return _GenImagePerlinNoise(
      width,
      height,
      offsetX,
      offsetY,
      scale,
    );
  }

  late final _GenImagePerlinNoisePtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Float)>>('GenImagePerlinNoise');
  late final _GenImagePerlinNoise = _GenImagePerlinNoisePtr.asFunction<
      RLImage Function(int, int, int, int, double)>();

  RLImage GenImageCellular(
    int width,
    int height,
    int tileSize,
  ) {
    return _GenImageCellular(
      width,
      height,
      tileSize,
    );
  }

  late final _GenImageCellularPtr =
      _lookup<ffi.NativeFunction<RLImage Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GenImageCellular');
  late final _GenImageCellular =
      _GenImageCellularPtr.asFunction<RLImage Function(int, int, int)>();

  RLImage GenImageText(
    int width,
    int height,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GenImageText(
      width,
      height,
      text,
    );
  }

  late final _GenImageTextPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('GenImageText');
  late final _GenImageText = _GenImageTextPtr.asFunction<
      RLImage Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// Image manipulation functions
  RLImage ImageCopy(
    RLImage image,
  ) {
    return _ImageCopy(
      image,
    );
  }

  late final _ImageCopyPtr =
      _lookup<ffi.NativeFunction<RLImage Function(RLImage)>>('ImageCopy');
  late final _ImageCopy = _ImageCopyPtr.asFunction<RLImage Function(RLImage)>();

  RLImage ImageFromImage(
    RLImage image,
    RLRectangle rec,
  ) {
    return _ImageFromImage(
      image,
      rec,
    );
  }

  late final _ImageFromImagePtr =
      _lookup<ffi.NativeFunction<RLImage Function(RLImage, RLRectangle)>>(
          'ImageFromImage');
  late final _ImageFromImage =
      _ImageFromImagePtr.asFunction<RLImage Function(RLImage, RLRectangle)>();

  RLImage ImageText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
    RLColor color,
  ) {
    return _ImageText(
      text,
      fontSize,
      color,
    );
  }

  late final _ImageTextPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(
              ffi.Pointer<ffi.Char>, ffi.Int, RLColor)>>('ImageText');
  late final _ImageText = _ImageTextPtr.asFunction<
      RLImage Function(ffi.Pointer<ffi.Char>, int, RLColor)>();

  RLImage ImageTextEx(
    RLFont font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
    RLColor tint,
  ) {
    return _ImageTextEx(
      font,
      text,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageTextExPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(RLFont, ffi.Pointer<ffi.Char>, ffi.Float, ffi.Float,
              RLColor)>>('ImageTextEx');
  late final _ImageTextEx = _ImageTextExPtr.asFunction<
      RLImage Function(
          RLFont, ffi.Pointer<ffi.Char>, double, double, RLColor)>();

  void ImageFormat(
    ffi.Pointer<RLImage> image,
    int newFormat,
  ) {
    return _ImageFormat(
      image,
      newFormat,
    );
  }

  late final _ImageFormatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int)>>(
      'ImageFormat');
  late final _ImageFormat =
      _ImageFormatPtr.asFunction<void Function(ffi.Pointer<RLImage>, int)>();

  void ImageToPOT(
    ffi.Pointer<RLImage> image,
    RLColor fill,
  ) {
    return _ImageToPOT(
      image,
      fill,
    );
  }

  late final _ImageToPOTPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, RLColor)>>(
      'ImageToPOT');
  late final _ImageToPOT =
      _ImageToPOTPtr.asFunction<void Function(ffi.Pointer<RLImage>, RLColor)>();

  void ImageCrop(
    ffi.Pointer<RLImage> image,
    RLRectangle crop,
  ) {
    return _ImageCrop(
      image,
      crop,
    );
  }

  late final _ImageCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLRectangle)>>('ImageCrop');
  late final _ImageCrop = _ImageCropPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLRectangle)>();

  void ImageAlphaCrop(
    ffi.Pointer<RLImage> image,
    double threshold,
  ) {
    return _ImageAlphaCrop(
      image,
      threshold,
    );
  }

  late final _ImageAlphaCropPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Float)>>(
      'ImageAlphaCrop');
  late final _ImageAlphaCrop = _ImageAlphaCropPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, double)>();

  void ImageAlphaClear(
    ffi.Pointer<RLImage> image,
    RLColor color,
    double threshold,
  ) {
    return _ImageAlphaClear(
      image,
      color,
      threshold,
    );
  }

  late final _ImageAlphaClearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLImage>, RLColor, ffi.Float)>>('ImageAlphaClear');
  late final _ImageAlphaClear = _ImageAlphaClearPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLColor, double)>();

  void ImageAlphaMask(
    ffi.Pointer<RLImage> image,
    RLImage alphaMask,
  ) {
    return _ImageAlphaMask(
      image,
      alphaMask,
    );
  }

  late final _ImageAlphaMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, RLImage)>>(
      'ImageAlphaMask');
  late final _ImageAlphaMask = _ImageAlphaMaskPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLImage)>();

  void ImageAlphaPremultiply(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageAlphaPremultiply(
      image,
    );
  }

  late final _ImageAlphaPremultiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageAlphaPremultiply');
  late final _ImageAlphaPremultiply = _ImageAlphaPremultiplyPtr.asFunction<
      void Function(ffi.Pointer<RLImage>)>();

  void ImageBlurGaussian(
    ffi.Pointer<RLImage> image,
    int blurSize,
  ) {
    return _ImageBlurGaussian(
      image,
      blurSize,
    );
  }

  late final _ImageBlurGaussianPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int)>>(
      'ImageBlurGaussian');
  late final _ImageBlurGaussian = _ImageBlurGaussianPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int)>();

  void ImageResize(
    ffi.Pointer<RLImage> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResize(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLImage>, ffi.Int, ffi.Int)>>('ImageResize');
  late final _ImageResize = _ImageResizePtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int)>();

  void ImageResizeNN(
    ffi.Pointer<RLImage> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResizeNN(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizeNNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLImage>, ffi.Int, ffi.Int)>>('ImageResizeNN');
  late final _ImageResizeNN = _ImageResizeNNPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int)>();

  void ImageResizeCanvas(
    ffi.Pointer<RLImage> image,
    int newWidth,
    int newHeight,
    int offsetX,
    int offsetY,
    RLColor fill,
  ) {
    return _ImageResizeCanvas(
      image,
      newWidth,
      newHeight,
      offsetX,
      offsetY,
      fill,
    );
  }

  late final _ImageResizeCanvasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, RLColor)>>('ImageResizeCanvas');
  late final _ImageResizeCanvas = _ImageResizeCanvasPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, int, RLColor)>();

  void ImageMipmaps(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageMipmaps(
      image,
    );
  }

  late final _ImageMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageMipmaps');
  late final _ImageMipmaps =
      _ImageMipmapsPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageDither(
    ffi.Pointer<RLImage> image,
    int rBpp,
    int gBpp,
    int bBpp,
    int aBpp,
  ) {
    return _ImageDither(
      image,
      rBpp,
      gBpp,
      bBpp,
      aBpp,
    );
  }

  late final _ImageDitherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ImageDither');
  late final _ImageDither = _ImageDitherPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, int)>();

  void ImageFlipVertical(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageFlipVertical(
      image,
    );
  }

  late final _ImageFlipVerticalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageFlipVertical');
  late final _ImageFlipVertical =
      _ImageFlipVerticalPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageFlipHorizontal(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageFlipHorizontal(
      image,
    );
  }

  late final _ImageFlipHorizontalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageFlipHorizontal');
  late final _ImageFlipHorizontal =
      _ImageFlipHorizontalPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageRotate(
    ffi.Pointer<RLImage> image,
    int degrees,
  ) {
    return _ImageRotate(
      image,
      degrees,
    );
  }

  late final _ImageRotatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int)>>(
      'ImageRotate');
  late final _ImageRotate =
      _ImageRotatePtr.asFunction<void Function(ffi.Pointer<RLImage>, int)>();

  void ImageRotateCW(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageRotateCW(
      image,
    );
  }

  late final _ImageRotateCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageRotateCW');
  late final _ImageRotateCW =
      _ImageRotateCWPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageRotateCCW(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageRotateCCW(
      image,
    );
  }

  late final _ImageRotateCCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageRotateCCW');
  late final _ImageRotateCCW =
      _ImageRotateCCWPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageColorTint(
    ffi.Pointer<RLImage> image,
    RLColor color,
  ) {
    return _ImageColorTint(
      image,
      color,
    );
  }

  late final _ImageColorTintPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, RLColor)>>(
      'ImageColorTint');
  late final _ImageColorTint = _ImageColorTintPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLColor)>();

  void ImageColorInvert(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageColorInvert(
      image,
    );
  }

  late final _ImageColorInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageColorInvert');
  late final _ImageColorInvert =
      _ImageColorInvertPtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageColorGrayscale(
    ffi.Pointer<RLImage> image,
  ) {
    return _ImageColorGrayscale(
      image,
    );
  }

  late final _ImageColorGrayscalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>)>>(
          'ImageColorGrayscale');
  late final _ImageColorGrayscale =
      _ImageColorGrayscalePtr.asFunction<void Function(ffi.Pointer<RLImage>)>();

  void ImageColorContrast(
    ffi.Pointer<RLImage> image,
    double contrast,
  ) {
    return _ImageColorContrast(
      image,
      contrast,
    );
  }

  late final _ImageColorContrastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Float)>>(
      'ImageColorContrast');
  late final _ImageColorContrast = _ImageColorContrastPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, double)>();

  void ImageColorBrightness(
    ffi.Pointer<RLImage> image,
    int brightness,
  ) {
    return _ImageColorBrightness(
      image,
      brightness,
    );
  }

  late final _ImageColorBrightnessPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int)>>(
      'ImageColorBrightness');
  late final _ImageColorBrightness = _ImageColorBrightnessPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int)>();

  void ImageColorReplace(
    ffi.Pointer<RLImage> image,
    RLColor color,
    RLColor replace,
  ) {
    return _ImageColorReplace(
      image,
      color,
      replace,
    );
  }

  late final _ImageColorReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLImage>, RLColor, RLColor)>>('ImageColorReplace');
  late final _ImageColorReplace = _ImageColorReplacePtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLColor, RLColor)>();

  ffi.Pointer<RLColor> LoadImageColors(
    RLImage image,
  ) {
    return _LoadImageColors(
      image,
    );
  }

  late final _LoadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RLColor> Function(RLImage)>>(
          'LoadImageColors');
  late final _LoadImageColors =
      _LoadImageColorsPtr.asFunction<ffi.Pointer<RLColor> Function(RLImage)>();

  ffi.Pointer<RLColor> LoadImagePalette(
    RLImage image,
    int maxPaletteSize,
    ffi.Pointer<ffi.Int> colorCount,
  ) {
    return _LoadImagePalette(
      image,
      maxPaletteSize,
      colorCount,
    );
  }

  late final _LoadImagePalettePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RLColor> Function(
              RLImage, ffi.Int, ffi.Pointer<ffi.Int>)>>('LoadImagePalette');
  late final _LoadImagePalette = _LoadImagePalettePtr.asFunction<
      ffi.Pointer<RLColor> Function(RLImage, int, ffi.Pointer<ffi.Int>)>();

  void UnloadImageColors(
    ffi.Pointer<RLColor> colors,
  ) {
    return _UnloadImageColors(
      colors,
    );
  }

  late final _UnloadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLColor>)>>(
          'UnloadImageColors');
  late final _UnloadImageColors =
      _UnloadImageColorsPtr.asFunction<void Function(ffi.Pointer<RLColor>)>();

  void UnloadImagePalette(
    ffi.Pointer<RLColor> colors,
  ) {
    return _UnloadImagePalette(
      colors,
    );
  }

  late final _UnloadImagePalettePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLColor>)>>(
          'UnloadImagePalette');
  late final _UnloadImagePalette =
      _UnloadImagePalettePtr.asFunction<void Function(ffi.Pointer<RLColor>)>();

  RLRectangle GetImageAlphaBorder(
    RLImage image,
    double threshold,
  ) {
    return _GetImageAlphaBorder(
      image,
      threshold,
    );
  }

  late final _GetImageAlphaBorderPtr =
      _lookup<ffi.NativeFunction<RLRectangle Function(RLImage, ffi.Float)>>(
          'GetImageAlphaBorder');
  late final _GetImageAlphaBorder = _GetImageAlphaBorderPtr.asFunction<
      RLRectangle Function(RLImage, double)>();

  RLColor GetImageColor(
    RLImage image,
    int x,
    int y,
  ) {
    return _GetImageColor(
      image,
      x,
      y,
    );
  }

  late final _GetImageColorPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLImage, ffi.Int, ffi.Int)>>(
          'GetImageColor');
  late final _GetImageColor =
      _GetImageColorPtr.asFunction<RLColor Function(RLImage, int, int)>();

  /// Image drawing functions
  /// NOTE: Image software-rendering functions (CPU)
  void ImageClearBackground(
    ffi.Pointer<RLImage> dst,
    RLColor color,
  ) {
    return _ImageClearBackground(
      dst,
      color,
    );
  }

  late final _ImageClearBackgroundPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLImage>, RLColor)>>(
      'ImageClearBackground');
  late final _ImageClearBackground = _ImageClearBackgroundPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLColor)>();

  void ImageDrawPixel(
    ffi.Pointer<RLImage> dst,
    int posX,
    int posY,
    RLColor color,
  ) {
    return _ImageDrawPixel(
      dst,
      posX,
      posY,
      color,
    );
  }

  late final _ImageDrawPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int,
              RLColor)>>('ImageDrawPixel');
  late final _ImageDrawPixel = _ImageDrawPixelPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, RLColor)>();

  void ImageDrawPixelV(
    ffi.Pointer<RLImage> dst,
    RLVector2 position,
    RLColor color,
  ) {
    return _ImageDrawPixelV(
      dst,
      position,
      color,
    );
  }

  late final _ImageDrawPixelVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLImage>, RLVector2, RLColor)>>('ImageDrawPixelV');
  late final _ImageDrawPixelV = _ImageDrawPixelVPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLVector2, RLColor)>();

  void ImageDrawLine(
    ffi.Pointer<RLImage> dst,
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    RLColor color,
  ) {
    return _ImageDrawLine(
      dst,
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _ImageDrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, RLColor)>>('ImageDrawLine');
  late final _ImageDrawLine = _ImageDrawLinePtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, int, RLColor)>();

  void ImageDrawLineV(
    ffi.Pointer<RLImage> dst,
    RLVector2 start,
    RLVector2 end,
    RLColor color,
  ) {
    return _ImageDrawLineV(
      dst,
      start,
      end,
      color,
    );
  }

  late final _ImageDrawLineVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLVector2, RLVector2,
              RLColor)>>('ImageDrawLineV');
  late final _ImageDrawLineV = _ImageDrawLineVPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLVector2, RLVector2, RLColor)>();

  void ImageDrawCircle(
    ffi.Pointer<RLImage> dst,
    int centerX,
    int centerY,
    int radius,
    RLColor color,
  ) {
    return _ImageDrawCircle(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              RLColor)>>('ImageDrawCircle');
  late final _ImageDrawCircle = _ImageDrawCirclePtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, RLColor)>();

  void ImageDrawCircleV(
    ffi.Pointer<RLImage> dst,
    RLVector2 center,
    int radius,
    RLColor color,
  ) {
    return _ImageDrawCircleV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLVector2, ffi.Int,
              RLColor)>>('ImageDrawCircleV');
  late final _ImageDrawCircleV = _ImageDrawCircleVPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLVector2, int, RLColor)>();

  void ImageDrawCircleLines(
    ffi.Pointer<RLImage> dst,
    int centerX,
    int centerY,
    int radius,
    RLColor color,
  ) {
    return _ImageDrawCircleLines(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              RLColor)>>('ImageDrawCircleLines');
  late final _ImageDrawCircleLines = _ImageDrawCircleLinesPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, RLColor)>();

  void ImageDrawCircleLinesV(
    ffi.Pointer<RLImage> dst,
    RLVector2 center,
    int radius,
    RLColor color,
  ) {
    return _ImageDrawCircleLinesV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLVector2, ffi.Int,
              RLColor)>>('ImageDrawCircleLinesV');
  late final _ImageDrawCircleLinesV = _ImageDrawCircleLinesVPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLVector2, int, RLColor)>();

  void ImageDrawRectangle(
    ffi.Pointer<RLImage> dst,
    int posX,
    int posY,
    int width,
    int height,
    RLColor color,
  ) {
    return _ImageDrawRectangle(
      dst,
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _ImageDrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, RLColor)>>('ImageDrawRectangle');
  late final _ImageDrawRectangle = _ImageDrawRectanglePtr.asFunction<
      void Function(ffi.Pointer<RLImage>, int, int, int, int, RLColor)>();

  void ImageDrawRectangleV(
    ffi.Pointer<RLImage> dst,
    RLVector2 position,
    RLVector2 size,
    RLColor color,
  ) {
    return _ImageDrawRectangleV(
      dst,
      position,
      size,
      color,
    );
  }

  late final _ImageDrawRectangleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLVector2, RLVector2,
              RLColor)>>('ImageDrawRectangleV');
  late final _ImageDrawRectangleV = _ImageDrawRectangleVPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLVector2, RLVector2, RLColor)>();

  void ImageDrawRectangleRec(
    ffi.Pointer<RLImage> dst,
    RLRectangle rec,
    RLColor color,
  ) {
    return _ImageDrawRectangleRec(
      dst,
      rec,
      color,
    );
  }

  late final _ImageDrawRectangleRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLRectangle,
              RLColor)>>('ImageDrawRectangleRec');
  late final _ImageDrawRectangleRec = _ImageDrawRectangleRecPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLRectangle, RLColor)>();

  void ImageDrawRectangleLines(
    ffi.Pointer<RLImage> dst,
    RLRectangle rec,
    int thick,
    RLColor color,
  ) {
    return _ImageDrawRectangleLines(
      dst,
      rec,
      thick,
      color,
    );
  }

  late final _ImageDrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLRectangle, ffi.Int,
              RLColor)>>('ImageDrawRectangleLines');
  late final _ImageDrawRectangleLines = _ImageDrawRectangleLinesPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLRectangle, int, RLColor)>();

  void ImageDraw(
    ffi.Pointer<RLImage> dst,
    RLImage src,
    RLRectangle srcRec,
    RLRectangle dstRec,
    RLColor tint,
  ) {
    return _ImageDraw(
      dst,
      src,
      srcRec,
      dstRec,
      tint,
    );
  }

  late final _ImageDrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLImage, RLRectangle,
              RLRectangle, RLColor)>>('ImageDraw');
  late final _ImageDraw = _ImageDrawPtr.asFunction<
      void Function(
          ffi.Pointer<RLImage>, RLImage, RLRectangle, RLRectangle, RLColor)>();

  void ImageDrawText(
    ffi.Pointer<RLImage> dst,
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    RLColor color,
  ) {
    return _ImageDrawText(
      dst,
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _ImageDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int, ffi.Int, RLColor)>>('ImageDrawText');
  late final _ImageDrawText = _ImageDrawTextPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, ffi.Pointer<ffi.Char>, int, int, int,
          RLColor)>();

  void ImageDrawTextEx(
    ffi.Pointer<RLImage> dst,
    RLFont font,
    ffi.Pointer<ffi.Char> text,
    RLVector2 position,
    double fontSize,
    double spacing,
    RLColor tint,
  ) {
    return _ImageDrawTextEx(
      dst,
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageDrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLImage>, RLFont, ffi.Pointer<ffi.Char>,
              RLVector2, ffi.Float, ffi.Float, RLColor)>>('ImageDrawTextEx');
  late final _ImageDrawTextEx = _ImageDrawTextExPtr.asFunction<
      void Function(ffi.Pointer<RLImage>, RLFont, ffi.Pointer<ffi.Char>,
          RLVector2, double, double, RLColor)>();

  /// Texture loading functions
  /// NOTE: These functions require GPU access
  RLTexture2D LoadTexture(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadTexture(
      fileName,
    );
  }

  late final _LoadTexturePtr =
      _lookup<ffi.NativeFunction<RLTexture2D Function(ffi.Pointer<ffi.Char>)>>(
          'LoadTexture');
  late final _LoadTexture =
      _LoadTexturePtr.asFunction<RLTexture2D Function(ffi.Pointer<ffi.Char>)>();

  RLTexture2D LoadTextureFromImage(
    RLImage image,
  ) {
    return _LoadTextureFromImage(
      image,
    );
  }

  late final _LoadTextureFromImagePtr =
      _lookup<ffi.NativeFunction<RLTexture2D Function(RLImage)>>(
          'LoadTextureFromImage');
  late final _LoadTextureFromImage =
      _LoadTextureFromImagePtr.asFunction<RLTexture2D Function(RLImage)>();

  RLTextureCubemap LoadTextureCubemap(
    RLImage image,
    int layout,
  ) {
    return _LoadTextureCubemap(
      image,
      layout,
    );
  }

  late final _LoadTextureCubemapPtr =
      _lookup<ffi.NativeFunction<RLTextureCubemap Function(RLImage, ffi.Int)>>(
          'LoadTextureCubemap');
  late final _LoadTextureCubemap = _LoadTextureCubemapPtr.asFunction<
      RLTextureCubemap Function(RLImage, int)>();

  RLRenderTexture2D LoadRenderTexture(
    int width,
    int height,
  ) {
    return _LoadRenderTexture(
      width,
      height,
    );
  }

  late final _LoadRenderTexturePtr =
      _lookup<ffi.NativeFunction<RLRenderTexture2D Function(ffi.Int, ffi.Int)>>(
          'LoadRenderTexture');
  late final _LoadRenderTexture =
      _LoadRenderTexturePtr.asFunction<RLRenderTexture2D Function(int, int)>();

  bool IsTextureReady(
    RLTexture2D texture,
  ) {
    return _IsTextureReady(
      texture,
    );
  }

  late final _IsTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLTexture2D)>>(
          'IsTextureReady');
  late final _IsTextureReady =
      _IsTextureReadyPtr.asFunction<bool Function(RLTexture2D)>();

  void UnloadTexture(
    RLTexture2D texture,
  ) {
    return _UnloadTexture(
      texture,
    );
  }

  late final _UnloadTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLTexture2D)>>(
          'UnloadTexture');
  late final _UnloadTexture =
      _UnloadTexturePtr.asFunction<void Function(RLTexture2D)>();

  bool IsRenderTextureReady(
    RLRenderTexture2D target,
  ) {
    return _IsRenderTextureReady(
      target,
    );
  }

  late final _IsRenderTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLRenderTexture2D)>>(
          'IsRenderTextureReady');
  late final _IsRenderTextureReady =
      _IsRenderTextureReadyPtr.asFunction<bool Function(RLRenderTexture2D)>();

  void UnloadRenderTexture(
    RLRenderTexture2D target,
  ) {
    return _UnloadRenderTexture(
      target,
    );
  }

  late final _UnloadRenderTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLRenderTexture2D)>>(
          'UnloadRenderTexture');
  late final _UnloadRenderTexture =
      _UnloadRenderTexturePtr.asFunction<void Function(RLRenderTexture2D)>();

  void UpdateTexture(
    RLTexture2D texture,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTexture(
      texture,
      pixels,
    );
  }

  late final _UpdateTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLTexture2D, ffi.Pointer<ffi.Void>)>>('UpdateTexture');
  late final _UpdateTexture = _UpdateTexturePtr.asFunction<
      void Function(RLTexture2D, ffi.Pointer<ffi.Void>)>();

  void UpdateTextureRec(
    RLTexture2D texture,
    RLRectangle rec,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTextureRec(
      texture,
      rec,
      pixels,
    );
  }

  late final _UpdateTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLTexture2D, RLRectangle,
              ffi.Pointer<ffi.Void>)>>('UpdateTextureRec');
  late final _UpdateTextureRec = _UpdateTextureRecPtr.asFunction<
      void Function(RLTexture2D, RLRectangle, ffi.Pointer<ffi.Void>)>();

  /// Texture configuration functions
  void GenTextureMipmaps(
    ffi.Pointer<RLTexture2D> texture,
  ) {
    return _GenTextureMipmaps(
      texture,
    );
  }

  late final _GenTextureMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLTexture2D>)>>(
          'GenTextureMipmaps');
  late final _GenTextureMipmaps = _GenTextureMipmapsPtr.asFunction<
      void Function(ffi.Pointer<RLTexture2D>)>();

  void SetTextureFilter(
    RLTexture2D texture,
    int filter,
  ) {
    return _SetTextureFilter(
      texture,
      filter,
    );
  }

  late final _SetTextureFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLTexture2D, ffi.Int)>>(
          'SetTextureFilter');
  late final _SetTextureFilter =
      _SetTextureFilterPtr.asFunction<void Function(RLTexture2D, int)>();

  void SetTextureWrap(
    RLTexture2D texture,
    int wrap,
  ) {
    return _SetTextureWrap(
      texture,
      wrap,
    );
  }

  late final _SetTextureWrapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLTexture2D, ffi.Int)>>(
          'SetTextureWrap');
  late final _SetTextureWrap =
      _SetTextureWrapPtr.asFunction<void Function(RLTexture2D, int)>();

  /// Texture drawing functions
  void DrawTexture(
    RLTexture2D texture,
    int posX,
    int posY,
    RLColor tint,
  ) {
    return _DrawTexture(
      texture,
      posX,
      posY,
      tint,
    );
  }

  late final _DrawTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLTexture2D, ffi.Int, ffi.Int, RLColor)>>('DrawTexture');
  late final _DrawTexture = _DrawTexturePtr.asFunction<
      void Function(RLTexture2D, int, int, RLColor)>();

  void DrawTextureV(
    RLTexture2D texture,
    RLVector2 position,
    RLColor tint,
  ) {
    return _DrawTextureV(
      texture,
      position,
      tint,
    );
  }

  late final _DrawTextureVPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(RLTexture2D, RLVector2, RLColor)>>(
      'DrawTextureV');
  late final _DrawTextureV = _DrawTextureVPtr.asFunction<
      void Function(RLTexture2D, RLVector2, RLColor)>();

  void DrawTextureEx(
    RLTexture2D texture,
    RLVector2 position,
    double rotation,
    double scale,
    RLColor tint,
  ) {
    return _DrawTextureEx(
      texture,
      position,
      rotation,
      scale,
      tint,
    );
  }

  late final _DrawTextureExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLTexture2D, RLVector2, ffi.Float, ffi.Float,
              RLColor)>>('DrawTextureEx');
  late final _DrawTextureEx = _DrawTextureExPtr.asFunction<
      void Function(RLTexture2D, RLVector2, double, double, RLColor)>();

  void DrawTextureRec(
    RLTexture2D texture,
    RLRectangle source,
    RLVector2 position,
    RLColor tint,
  ) {
    return _DrawTextureRec(
      texture,
      source,
      position,
      tint,
    );
  }

  late final _DrawTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLTexture2D, RLRectangle, RLVector2, RLColor)>>('DrawTextureRec');
  late final _DrawTextureRec = _DrawTextureRecPtr.asFunction<
      void Function(RLTexture2D, RLRectangle, RLVector2, RLColor)>();

  void DrawTexturePro(
    RLTexture2D texture,
    RLRectangle source,
    RLRectangle dest,
    RLVector2 origin,
    double rotation,
    RLColor tint,
  ) {
    return _DrawTexturePro(
      texture,
      source,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLTexture2D, RLRectangle, RLRectangle, RLVector2,
              ffi.Float, RLColor)>>('DrawTexturePro');
  late final _DrawTexturePro = _DrawTextureProPtr.asFunction<
      void Function(
          RLTexture2D, RLRectangle, RLRectangle, RLVector2, double, RLColor)>();

  void DrawTextureNPatch(
    RLTexture2D texture,
    RLNPatchInfo nPatchInfo,
    RLRectangle dest,
    RLVector2 origin,
    double rotation,
    RLColor tint,
  ) {
    return _DrawTextureNPatch(
      texture,
      nPatchInfo,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureNPatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLTexture2D, RLNPatchInfo, RLRectangle, RLVector2,
              ffi.Float, RLColor)>>('DrawTextureNPatch');
  late final _DrawTextureNPatch = _DrawTextureNPatchPtr.asFunction<
      void Function(RLTexture2D, RLNPatchInfo, RLRectangle, RLVector2, double,
          RLColor)>();

  /// Color/pixel related functions
  RLColor Fade(
    RLColor color,
    double alpha,
  ) {
    return _Fade(
      color,
      alpha,
    );
  }

  late final _FadePtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, ffi.Float)>>('Fade');
  late final _Fade = _FadePtr.asFunction<RLColor Function(RLColor, double)>();

  int ColorToInt(
    RLColor color,
  ) {
    return _ColorToInt(
      color,
    );
  }

  late final _ColorToIntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(RLColor)>>('ColorToInt');
  late final _ColorToInt = _ColorToIntPtr.asFunction<int Function(RLColor)>();

  RLVector4 ColorNormalize(
    RLColor color,
  ) {
    return _ColorNormalize(
      color,
    );
  }

  late final _ColorNormalizePtr =
      _lookup<ffi.NativeFunction<RLVector4 Function(RLColor)>>(
          'ColorNormalize');
  late final _ColorNormalize =
      _ColorNormalizePtr.asFunction<RLVector4 Function(RLColor)>();

  RLColor ColorFromNormalized(
    RLVector4 normalized,
  ) {
    return _ColorFromNormalized(
      normalized,
    );
  }

  late final _ColorFromNormalizedPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLVector4)>>(
          'ColorFromNormalized');
  late final _ColorFromNormalized =
      _ColorFromNormalizedPtr.asFunction<RLColor Function(RLVector4)>();

  RLVector3 ColorToHSV(
    RLColor color,
  ) {
    return _ColorToHSV(
      color,
    );
  }

  late final _ColorToHSVPtr =
      _lookup<ffi.NativeFunction<RLVector3 Function(RLColor)>>('ColorToHSV');
  late final _ColorToHSV =
      _ColorToHSVPtr.asFunction<RLVector3 Function(RLColor)>();

  RLColor ColorFromHSV(
    double hue,
    double saturation,
    double value,
  ) {
    return _ColorFromHSV(
      hue,
      saturation,
      value,
    );
  }

  late final _ColorFromHSVPtr = _lookup<
          ffi
          .NativeFunction<RLColor Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'ColorFromHSV');
  late final _ColorFromHSV =
      _ColorFromHSVPtr.asFunction<RLColor Function(double, double, double)>();

  RLColor ColorTint(
    RLColor color,
    RLColor tint,
  ) {
    return _ColorTint(
      color,
      tint,
    );
  }

  late final _ColorTintPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, RLColor)>>(
          'ColorTint');
  late final _ColorTint =
      _ColorTintPtr.asFunction<RLColor Function(RLColor, RLColor)>();

  RLColor ColorBrightness(
    RLColor color,
    double factor,
  ) {
    return _ColorBrightness(
      color,
      factor,
    );
  }

  late final _ColorBrightnessPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, ffi.Float)>>(
          'ColorBrightness');
  late final _ColorBrightness =
      _ColorBrightnessPtr.asFunction<RLColor Function(RLColor, double)>();

  RLColor ColorContrast(
    RLColor color,
    double contrast,
  ) {
    return _ColorContrast(
      color,
      contrast,
    );
  }

  late final _ColorContrastPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, ffi.Float)>>(
          'ColorContrast');
  late final _ColorContrast =
      _ColorContrastPtr.asFunction<RLColor Function(RLColor, double)>();

  RLColor ColorAlpha(
    RLColor color,
    double alpha,
  ) {
    return _ColorAlpha(
      color,
      alpha,
    );
  }

  late final _ColorAlphaPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, ffi.Float)>>(
          'ColorAlpha');
  late final _ColorAlpha =
      _ColorAlphaPtr.asFunction<RLColor Function(RLColor, double)>();

  RLColor ColorAlphaBlend(
    RLColor dst,
    RLColor src,
    RLColor tint,
  ) {
    return _ColorAlphaBlend(
      dst,
      src,
      tint,
    );
  }

  late final _ColorAlphaBlendPtr =
      _lookup<ffi.NativeFunction<RLColor Function(RLColor, RLColor, RLColor)>>(
          'ColorAlphaBlend');
  late final _ColorAlphaBlend = _ColorAlphaBlendPtr.asFunction<
      RLColor Function(RLColor, RLColor, RLColor)>();

  RLColor GetColor(
    int hexValue,
  ) {
    return _GetColor(
      hexValue,
    );
  }

  late final _GetColorPtr =
      _lookup<ffi.NativeFunction<RLColor Function(ffi.UnsignedInt)>>(
          'GetColor');
  late final _GetColor = _GetColorPtr.asFunction<RLColor Function(int)>();

  RLColor GetPixelColor(
    ffi.Pointer<ffi.Void> srcPtr,
    int format,
  ) {
    return _GetPixelColor(
      srcPtr,
      format,
    );
  }

  late final _GetPixelColorPtr = _lookup<
          ffi.NativeFunction<RLColor Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'GetPixelColor');
  late final _GetPixelColor = _GetPixelColorPtr.asFunction<
      RLColor Function(ffi.Pointer<ffi.Void>, int)>();

  void SetPixelColor(
    ffi.Pointer<ffi.Void> dstPtr,
    RLColor color,
    int format,
  ) {
    return _SetPixelColor(
      dstPtr,
      color,
      format,
    );
  }

  late final _SetPixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, RLColor, ffi.Int)>>('SetPixelColor');
  late final _SetPixelColor = _SetPixelColorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, RLColor, int)>();

  int GetPixelDataSize(
    int width,
    int height,
    int format,
  ) {
    return _GetPixelDataSize(
      width,
      height,
      format,
    );
  }

  late final _GetPixelDataSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GetPixelDataSize');
  late final _GetPixelDataSize =
      _GetPixelDataSizePtr.asFunction<int Function(int, int, int)>();

  /// Font loading/unloading functions
  RLFont GetFontDefault() {
    return _GetFontDefault();
  }

  late final _GetFontDefaultPtr =
      _lookup<ffi.NativeFunction<RLFont Function()>>('GetFontDefault');
  late final _GetFontDefault =
      _GetFontDefaultPtr.asFunction<RLFont Function()>();

  RLFont LoadFont(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFont(
      fileName,
    );
  }

  late final _LoadFontPtr =
      _lookup<ffi.NativeFunction<RLFont Function(ffi.Pointer<ffi.Char>)>>(
          'LoadFont');
  late final _LoadFont =
      _LoadFontPtr.asFunction<RLFont Function(ffi.Pointer<ffi.Char>)>();

  RLFont LoadFontEx(
    ffi.Pointer<ffi.Char> fileName,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontEx(
      fileName,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontExPtr = _lookup<
      ffi.NativeFunction<
          RLFont Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontEx');
  late final _LoadFontEx = _LoadFontExPtr.asFunction<
      RLFont Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>, int)>();

  RLFont LoadFontFromImage(
    RLImage image,
    RLColor key,
    int firstChar,
  ) {
    return _LoadFontFromImage(
      image,
      key,
      firstChar,
    );
  }

  late final _LoadFontFromImagePtr =
      _lookup<ffi.NativeFunction<RLFont Function(RLImage, RLColor, ffi.Int)>>(
          'LoadFontFromImage');
  late final _LoadFontFromImage = _LoadFontFromImagePtr.asFunction<
      RLFont Function(RLImage, RLColor, int)>();

  RLFont LoadFontFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontFromMemory(
      fileType,
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          RLFont Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontFromMemory');
  late final _LoadFontFromMemory = _LoadFontFromMemoryPtr.asFunction<
      RLFont Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          int, ffi.Pointer<ffi.Int>, int)>();

  bool IsFontReady(
    RLFont font,
  ) {
    return _IsFontReady(
      font,
    );
  }

  late final _IsFontReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLFont)>>('IsFontReady');
  late final _IsFontReady = _IsFontReadyPtr.asFunction<bool Function(RLFont)>();

  ffi.Pointer<RLGlyphInfo> LoadFontData(
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    int type,
  ) {
    return _LoadFontData(
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
      type,
    );
  }

  late final _LoadFontDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RLGlyphInfo> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int)>>('LoadFontData');
  late final _LoadFontData = _LoadFontDataPtr.asFunction<
      ffi.Pointer<RLGlyphInfo> Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Int>, int, int)>();

  RLImage GenImageFontAtlas(
    ffi.Pointer<RLGlyphInfo> glyphs,
    ffi.Pointer<ffi.Pointer<RLRectangle>> glyphRecs,
    int glyphCount,
    int fontSize,
    int padding,
    int packMethod,
  ) {
    return _GenImageFontAtlas(
      glyphs,
      glyphRecs,
      glyphCount,
      fontSize,
      padding,
      packMethod,
    );
  }

  late final _GenImageFontAtlasPtr = _lookup<
      ffi.NativeFunction<
          RLImage Function(
              ffi.Pointer<RLGlyphInfo>,
              ffi.Pointer<ffi.Pointer<RLRectangle>>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('GenImageFontAtlas');
  late final _GenImageFontAtlas = _GenImageFontAtlasPtr.asFunction<
      RLImage Function(ffi.Pointer<RLGlyphInfo>,
          ffi.Pointer<ffi.Pointer<RLRectangle>>, int, int, int, int)>();

  void UnloadFontData(
    ffi.Pointer<RLGlyphInfo> glyphs,
    int glyphCount,
  ) {
    return _UnloadFontData(
      glyphs,
      glyphCount,
    );
  }

  late final _UnloadFontDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLGlyphInfo>, ffi.Int)>>('UnloadFontData');
  late final _UnloadFontData = _UnloadFontDataPtr.asFunction<
      void Function(ffi.Pointer<RLGlyphInfo>, int)>();

  void UnloadFont(
    RLFont font,
  ) {
    return _UnloadFont(
      font,
    );
  }

  late final _UnloadFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLFont)>>('UnloadFont');
  late final _UnloadFont = _UnloadFontPtr.asFunction<void Function(RLFont)>();

  bool ExportFontAsCode(
    RLFont font,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportFontAsCode(
      font,
      fileName,
    );
  }

  late final _ExportFontAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(RLFont, ffi.Pointer<ffi.Char>)>>(
      'ExportFontAsCode');
  late final _ExportFontAsCode = _ExportFontAsCodePtr.asFunction<
      bool Function(RLFont, ffi.Pointer<ffi.Char>)>();

  /// Text drawing functions
  void DrawFPS(
    int posX,
    int posY,
  ) {
    return _DrawFPS(
      posX,
      posY,
    );
  }

  late final _DrawFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'DrawFPS');
  late final _DrawFPS = _DrawFPSPtr.asFunction<void Function(int, int)>();

  void DrawText(
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    RLColor color,
  ) {
    return _DrawText(
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _DrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              RLColor)>>('DrawText');
  late final _DrawText = _DrawTextPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, int, RLColor)>();

  void DrawTextEx(
    RLFont font,
    ffi.Pointer<ffi.Char> text,
    RLVector2 position,
    double fontSize,
    double spacing,
    RLColor tint,
  ) {
    return _DrawTextEx(
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLFont, ffi.Pointer<ffi.Char>, RLVector2, ffi.Float,
              ffi.Float, RLColor)>>('DrawTextEx');
  late final _DrawTextEx = _DrawTextExPtr.asFunction<
      void Function(
          RLFont, ffi.Pointer<ffi.Char>, RLVector2, double, double, RLColor)>();

  void DrawTextPro(
    RLFont font,
    ffi.Pointer<ffi.Char> text,
    RLVector2 position,
    RLVector2 origin,
    double rotation,
    double fontSize,
    double spacing,
    RLColor tint,
  ) {
    return _DrawTextPro(
      font,
      text,
      position,
      origin,
      rotation,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLFont, ffi.Pointer<ffi.Char>, RLVector2, RLVector2,
              ffi.Float, ffi.Float, ffi.Float, RLColor)>>('DrawTextPro');
  late final _DrawTextPro = _DrawTextProPtr.asFunction<
      void Function(RLFont, ffi.Pointer<ffi.Char>, RLVector2, RLVector2, double,
          double, double, RLColor)>();

  void DrawTextCodepoint(
    RLFont font,
    int codepoint,
    RLVector2 position,
    double fontSize,
    RLColor tint,
  ) {
    return _DrawTextCodepoint(
      font,
      codepoint,
      position,
      fontSize,
      tint,
    );
  }

  late final _DrawTextCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLFont, ffi.Int, RLVector2, ffi.Float,
              RLColor)>>('DrawTextCodepoint');
  late final _DrawTextCodepoint = _DrawTextCodepointPtr.asFunction<
      void Function(RLFont, int, RLVector2, double, RLColor)>();

  void DrawTextCodepoints(
    RLFont font,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    RLVector2 position,
    double fontSize,
    double spacing,
    RLColor tint,
  ) {
    return _DrawTextCodepoints(
      font,
      codepoints,
      codepointCount,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLFont, ffi.Pointer<ffi.Int>, ffi.Int, RLVector2,
              ffi.Float, ffi.Float, RLColor)>>('DrawTextCodepoints');
  late final _DrawTextCodepoints = _DrawTextCodepointsPtr.asFunction<
      void Function(RLFont, ffi.Pointer<ffi.Int>, int, RLVector2, double,
          double, RLColor)>();

  /// Text font info functions
  void SetTextLineSpacing(
    int spacing,
  ) {
    return _SetTextLineSpacing(
      spacing,
    );
  }

  late final _SetTextLineSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTextLineSpacing');
  late final _SetTextLineSpacing =
      _SetTextLineSpacingPtr.asFunction<void Function(int)>();

  int MeasureText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
  ) {
    return _MeasureText(
      text,
      fontSize,
    );
  }

  late final _MeasureTextPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'MeasureText');
  late final _MeasureText =
      _MeasureTextPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  RLVector2 MeasureTextEx(
    RLFont font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
  ) {
    return _MeasureTextEx(
      font,
      text,
      fontSize,
      spacing,
    );
  }

  late final _MeasureTextExPtr = _lookup<
      ffi.NativeFunction<
          RLVector2 Function(RLFont, ffi.Pointer<ffi.Char>, ffi.Float,
              ffi.Float)>>('MeasureTextEx');
  late final _MeasureTextEx = _MeasureTextExPtr.asFunction<
      RLVector2 Function(RLFont, ffi.Pointer<ffi.Char>, double, double)>();

  int GetGlyphIndex(
    RLFont font,
    int codepoint,
  ) {
    return _GetGlyphIndex(
      font,
      codepoint,
    );
  }

  late final _GetGlyphIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(RLFont, ffi.Int)>>(
          'GetGlyphIndex');
  late final _GetGlyphIndex =
      _GetGlyphIndexPtr.asFunction<int Function(RLFont, int)>();

  RLGlyphInfo GetGlyphInfo(
    RLFont font,
    int codepoint,
  ) {
    return _GetGlyphInfo(
      font,
      codepoint,
    );
  }

  late final _GetGlyphInfoPtr =
      _lookup<ffi.NativeFunction<RLGlyphInfo Function(RLFont, ffi.Int)>>(
          'GetGlyphInfo');
  late final _GetGlyphInfo =
      _GetGlyphInfoPtr.asFunction<RLGlyphInfo Function(RLFont, int)>();

  RLRectangle GetGlyphAtlasRec(
    RLFont font,
    int codepoint,
  ) {
    return _GetGlyphAtlasRec(
      font,
      codepoint,
    );
  }

  late final _GetGlyphAtlasRecPtr =
      _lookup<ffi.NativeFunction<RLRectangle Function(RLFont, ffi.Int)>>(
          'GetGlyphAtlasRec');
  late final _GetGlyphAtlasRec =
      _GetGlyphAtlasRecPtr.asFunction<RLRectangle Function(RLFont, int)>();

  /// Text codepoints management functions (unicode characters)
  ffi.Pointer<ffi.Char> LoadUTF8(
    ffi.Pointer<ffi.Int> codepoints,
    int length,
  ) {
    return _LoadUTF8(
      codepoints,
      length,
    );
  }

  late final _LoadUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Int)>>('LoadUTF8');
  late final _LoadUTF8 = _LoadUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>, int)>();

  void UnloadUTF8(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadUTF8(
      text,
    );
  }

  late final _UnloadUTF8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadUTF8');
  late final _UnloadUTF8 =
      _UnloadUTF8Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> LoadCodepoints(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _LoadCodepoints(
      text,
      count,
    );
  }

  late final _LoadCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadCodepoints');
  late final _LoadCodepoints = _LoadCodepointsPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadCodepoints(
    ffi.Pointer<ffi.Int> codepoints,
  ) {
    return _UnloadCodepoints(
      codepoints,
    );
  }

  late final _UnloadCodepointsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadCodepoints');
  late final _UnloadCodepoints =
      _UnloadCodepointsPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int GetCodepointCount(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GetCodepointCount(
      text,
    );
  }

  late final _GetCodepointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetCodepointCount');
  late final _GetCodepointCount =
      _GetCodepointCountPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int GetCodepoint(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepoint(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('GetCodepoint');
  late final _GetCodepoint = _GetCodepointPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointNext(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointNext(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointNext');
  late final _GetCodepointNext = _GetCodepointNextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointPrevious(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointPrevious(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPreviousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointPrevious');
  late final _GetCodepointPrevious = _GetCodepointPreviousPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> CodepointToUTF8(
    int codepoint,
    ffi.Pointer<ffi.Int> utf8Size,
  ) {
    return _CodepointToUTF8(
      codepoint,
      utf8Size,
    );
  }

  late final _CodepointToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CodepointToUTF8');
  late final _CodepointToUTF8 = _CodepointToUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Int>)>();

  /// Text strings management functions (no UTF-8 strings, only byte chars)
  /// NOTE: Some strings allocate memory internally for returned strings, just be careful!
  int TextCopy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _TextCopy(
      dst,
      src,
    );
  }

  late final _TextCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextCopy');
  late final _TextCopy = _TextCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool TextIsEqual(
    ffi.Pointer<ffi.Char> text1,
    ffi.Pointer<ffi.Char> text2,
  ) {
    return _TextIsEqual(
      text1,
      text2,
    );
  }

  late final _TextIsEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextIsEqual');
  late final _TextIsEqual = _TextIsEqualPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int TextLength(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextLength(
      text,
    );
  }

  late final _TextLengthPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'TextLength');
  late final _TextLength =
      _TextLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextFormat(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextFormat(
      text,
    );
  }

  late final _TextFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('TextFormat');
  late final _TextFormat = _TextFormatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextSubtext(
    ffi.Pointer<ffi.Char> text,
    int position,
    int length,
  ) {
    return _TextSubtext(
      text,
      position,
      length,
    );
  }

  late final _TextSubtextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('TextSubtext');
  late final _TextSubtext = _TextSubtextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> TextReplace(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> replace,
    ffi.Pointer<ffi.Char> by,
  ) {
    return _TextReplace(
      text,
      replace,
      by,
    );
  }

  late final _TextReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextReplace');
  late final _TextReplace = _TextReplacePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextInsert(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> insert,
    int position,
  ) {
    return _TextInsert(
      text,
      insert,
      position,
    );
  }

  late final _TextInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('TextInsert');
  late final _TextInsert = _TextInsertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> TextJoin(
    ffi.Pointer<ffi.Pointer<ffi.Char>> textList,
    int count,
    ffi.Pointer<ffi.Char> delimiter,
  ) {
    return _TextJoin(
      textList,
      count,
      delimiter,
    );
  }

  late final _TextJoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('TextJoin');
  late final _TextJoin = _TextJoinPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> TextSplit(
    ffi.Pointer<ffi.Char> text,
    int delimiter,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _TextSplit(
      text,
      delimiter,
      count,
    );
  }

  late final _TextSplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Char, ffi.Pointer<ffi.Int>)>>('TextSplit');
  late final _TextSplit = _TextSplitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  void TextAppend(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> append,
    ffi.Pointer<ffi.Int> position,
  ) {
    return _TextAppend(
      text,
      append,
      position,
    );
  }

  late final _TextAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('TextAppend');
  late final _TextAppend = _TextAppendPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int TextFindIndex(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> find,
  ) {
    return _TextFindIndex(
      text,
      find,
    );
  }

  late final _TextFindIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextFindIndex');
  late final _TextFindIndex = _TextFindIndexPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToUpper(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToUpper(
      text,
    );
  }

  late final _TextToUpperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToUpper');
  late final _TextToUpper = _TextToUpperPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToLower(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToLower(
      text,
    );
  }

  late final _TextToLowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToLower');
  late final _TextToLower = _TextToLowerPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToPascal(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToPascal(
      text,
    );
  }

  late final _TextToPascalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToPascal');
  late final _TextToPascal = _TextToPascalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int TextToInteger(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToInteger(
      text,
    );
  }

  late final _TextToIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'TextToInteger');
  late final _TextToInteger =
      _TextToIntegerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Basic geometric 3D shapes drawing functions
  void DrawLine3D(
    RLVector3 startPos,
    RLVector3 endPos,
    RLColor color,
  ) {
    return _DrawLine3D(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLine3DPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector3, RLVector3, RLColor)>>(
      'DrawLine3D');
  late final _DrawLine3D =
      _DrawLine3DPtr.asFunction<void Function(RLVector3, RLVector3, RLColor)>();

  void DrawPoint3D(
    RLVector3 position,
    RLColor color,
  ) {
    return _DrawPoint3D(
      position,
      color,
    );
  }

  late final _DrawPoint3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLVector3, RLColor)>>(
          'DrawPoint3D');
  late final _DrawPoint3D =
      _DrawPoint3DPtr.asFunction<void Function(RLVector3, RLColor)>();

  void DrawCircle3D(
    RLVector3 center,
    double radius,
    RLVector3 rotationAxis,
    double rotationAngle,
    RLColor color,
  ) {
    return _DrawCircle3D(
      center,
      radius,
      rotationAxis,
      rotationAngle,
      color,
    );
  }

  late final _DrawCircle3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, RLVector3, ffi.Float,
              RLColor)>>('DrawCircle3D');
  late final _DrawCircle3D = _DrawCircle3DPtr.asFunction<
      void Function(RLVector3, double, RLVector3, double, RLColor)>();

  void DrawTriangle3D(
    RLVector3 v1,
    RLVector3 v2,
    RLVector3 v3,
    RLColor color,
  ) {
    return _DrawTriangle3D(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangle3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLVector3, RLVector3, RLVector3, RLColor)>>('DrawTriangle3D');
  late final _DrawTriangle3D = _DrawTriangle3DPtr.asFunction<
      void Function(RLVector3, RLVector3, RLVector3, RLColor)>();

  void DrawTriangleStrip3D(
    ffi.Pointer<RLVector3> points,
    int pointCount,
    RLColor color,
  ) {
    return _DrawTriangleStrip3D(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStrip3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLVector3>, ffi.Int,
              RLColor)>>('DrawTriangleStrip3D');
  late final _DrawTriangleStrip3D = _DrawTriangleStrip3DPtr.asFunction<
      void Function(ffi.Pointer<RLVector3>, int, RLColor)>();

  void DrawCube(
    RLVector3 position,
    double width,
    double height,
    double length,
    RLColor color,
  ) {
    return _DrawCube(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Float, ffi.Float,
              RLColor)>>('DrawCube');
  late final _DrawCube = _DrawCubePtr.asFunction<
      void Function(RLVector3, double, double, double, RLColor)>();

  void DrawCubeV(
    RLVector3 position,
    RLVector3 size,
    RLColor color,
  ) {
    return _DrawCubeV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector3, RLVector3, RLColor)>>(
      'DrawCubeV');
  late final _DrawCubeV =
      _DrawCubeVPtr.asFunction<void Function(RLVector3, RLVector3, RLColor)>();

  void DrawCubeWires(
    RLVector3 position,
    double width,
    double height,
    double length,
    RLColor color,
  ) {
    return _DrawCubeWires(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Float, ffi.Float,
              RLColor)>>('DrawCubeWires');
  late final _DrawCubeWires = _DrawCubeWiresPtr.asFunction<
      void Function(RLVector3, double, double, double, RLColor)>();

  void DrawCubeWiresV(
    RLVector3 position,
    RLVector3 size,
    RLColor color,
  ) {
    return _DrawCubeWiresV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeWiresVPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector3, RLVector3, RLColor)>>(
      'DrawCubeWiresV');
  late final _DrawCubeWiresV = _DrawCubeWiresVPtr.asFunction<
      void Function(RLVector3, RLVector3, RLColor)>();

  void DrawSphere(
    RLVector3 centerPos,
    double radius,
    RLColor color,
  ) {
    return _DrawSphere(
      centerPos,
      radius,
      color,
    );
  }

  late final _DrawSpherePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector3, ffi.Float, RLColor)>>(
      'DrawSphere');
  late final _DrawSphere =
      _DrawSpherePtr.asFunction<void Function(RLVector3, double, RLColor)>();

  void DrawSphereEx(
    RLVector3 centerPos,
    double radius,
    int rings,
    int slices,
    RLColor color,
  ) {
    return _DrawSphereEx(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Int, ffi.Int,
              RLColor)>>('DrawSphereEx');
  late final _DrawSphereEx = _DrawSphereExPtr.asFunction<
      void Function(RLVector3, double, int, int, RLColor)>();

  void DrawSphereWires(
    RLVector3 centerPos,
    double radius,
    int rings,
    int slices,
    RLColor color,
  ) {
    return _DrawSphereWires(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Int, ffi.Int,
              RLColor)>>('DrawSphereWires');
  late final _DrawSphereWires = _DrawSphereWiresPtr.asFunction<
      void Function(RLVector3, double, int, int, RLColor)>();

  void DrawCylinder(
    RLVector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    RLColor color,
  ) {
    return _DrawCylinder(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCylinder');
  late final _DrawCylinder = _DrawCylinderPtr.asFunction<
      void Function(RLVector3, double, double, double, int, RLColor)>();

  void DrawCylinderEx(
    RLVector3 startPos,
    RLVector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    RLColor color,
  ) {
    return _DrawCylinderEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, RLVector3, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCylinderEx');
  late final _DrawCylinderEx = _DrawCylinderExPtr.asFunction<
      void Function(RLVector3, RLVector3, double, double, int, RLColor)>();

  void DrawCylinderWires(
    RLVector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    RLColor color,
  ) {
    return _DrawCylinderWires(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCylinderWires');
  late final _DrawCylinderWires = _DrawCylinderWiresPtr.asFunction<
      void Function(RLVector3, double, double, double, int, RLColor)>();

  void DrawCylinderWiresEx(
    RLVector3 startPos,
    RLVector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    RLColor color,
  ) {
    return _DrawCylinderWiresEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, RLVector3, ffi.Float, ffi.Float, ffi.Int,
              RLColor)>>('DrawCylinderWiresEx');
  late final _DrawCylinderWiresEx = _DrawCylinderWiresExPtr.asFunction<
      void Function(RLVector3, RLVector3, double, double, int, RLColor)>();

  void DrawCapsule(
    RLVector3 startPos,
    RLVector3 endPos,
    double radius,
    int slices,
    int rings,
    RLColor color,
  ) {
    return _DrawCapsule(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, RLVector3, ffi.Float, ffi.Int, ffi.Int,
              RLColor)>>('DrawCapsule');
  late final _DrawCapsule = _DrawCapsulePtr.asFunction<
      void Function(RLVector3, RLVector3, double, int, int, RLColor)>();

  void DrawCapsuleWires(
    RLVector3 startPos,
    RLVector3 endPos,
    double radius,
    int slices,
    int rings,
    RLColor color,
  ) {
    return _DrawCapsuleWires(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsuleWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLVector3, RLVector3, ffi.Float, ffi.Int, ffi.Int,
              RLColor)>>('DrawCapsuleWires');
  late final _DrawCapsuleWires = _DrawCapsuleWiresPtr.asFunction<
      void Function(RLVector3, RLVector3, double, int, int, RLColor)>();

  void DrawPlane(
    RLVector3 centerPos,
    RLVector2 size,
    RLColor color,
  ) {
    return _DrawPlane(
      centerPos,
      size,
      color,
    );
  }

  late final _DrawPlanePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLVector3, RLVector2, RLColor)>>(
      'DrawPlane');
  late final _DrawPlane =
      _DrawPlanePtr.asFunction<void Function(RLVector3, RLVector2, RLColor)>();

  void DrawRay(
    RLRay ray,
    RLColor color,
  ) {
    return _DrawRay(
      ray,
      color,
    );
  }

  late final _DrawRayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLRay, RLColor)>>('DrawRay');
  late final _DrawRay = _DrawRayPtr.asFunction<void Function(RLRay, RLColor)>();

  void DrawGrid(
    int slices,
    double spacing,
  ) {
    return _DrawGrid(
      slices,
      spacing,
    );
  }

  late final _DrawGridPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'DrawGrid');
  late final _DrawGrid = _DrawGridPtr.asFunction<void Function(int, double)>();

  /// Model management functions
  RLModel LoadModel(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadModel(
      fileName,
    );
  }

  late final _LoadModelPtr =
      _lookup<ffi.NativeFunction<RLModel Function(ffi.Pointer<ffi.Char>)>>(
          'LoadModel');
  late final _LoadModel =
      _LoadModelPtr.asFunction<RLModel Function(ffi.Pointer<ffi.Char>)>();

  RLModel LoadModelFromMesh(
    RLMesh mesh,
  ) {
    return _LoadModelFromMesh(
      mesh,
    );
  }

  late final _LoadModelFromMeshPtr =
      _lookup<ffi.NativeFunction<RLModel Function(RLMesh)>>(
          'LoadModelFromMesh');
  late final _LoadModelFromMesh =
      _LoadModelFromMeshPtr.asFunction<RLModel Function(RLMesh)>();

  bool IsModelReady(
    RLModel model,
  ) {
    return _IsModelReady(
      model,
    );
  }

  late final _IsModelReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLModel)>>('IsModelReady');
  late final _IsModelReady =
      _IsModelReadyPtr.asFunction<bool Function(RLModel)>();

  void UnloadModel(
    RLModel model,
  ) {
    return _UnloadModel(
      model,
    );
  }

  late final _UnloadModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLModel)>>('UnloadModel');
  late final _UnloadModel =
      _UnloadModelPtr.asFunction<void Function(RLModel)>();

  RLBoundingBox GetModelBoundingBox(
    RLModel model,
  ) {
    return _GetModelBoundingBox(
      model,
    );
  }

  late final _GetModelBoundingBoxPtr =
      _lookup<ffi.NativeFunction<RLBoundingBox Function(RLModel)>>(
          'GetModelBoundingBox');
  late final _GetModelBoundingBox =
      _GetModelBoundingBoxPtr.asFunction<RLBoundingBox Function(RLModel)>();

  /// Model drawing functions
  void DrawModel(
    RLModel model,
    RLVector3 position,
    double scale,
    RLColor tint,
  ) {
    return _DrawModel(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLModel, RLVector3, ffi.Float, RLColor)>>('DrawModel');
  late final _DrawModel = _DrawModelPtr.asFunction<
      void Function(RLModel, RLVector3, double, RLColor)>();

  void DrawModelEx(
    RLModel model,
    RLVector3 position,
    RLVector3 rotationAxis,
    double rotationAngle,
    RLVector3 scale,
    RLColor tint,
  ) {
    return _DrawModelEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLModel, RLVector3, RLVector3, ffi.Float, RLVector3,
              RLColor)>>('DrawModelEx');
  late final _DrawModelEx = _DrawModelExPtr.asFunction<
      void Function(
          RLModel, RLVector3, RLVector3, double, RLVector3, RLColor)>();

  void DrawModelWires(
    RLModel model,
    RLVector3 position,
    double scale,
    RLColor tint,
  ) {
    return _DrawModelWires(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLModel, RLVector3, ffi.Float, RLColor)>>('DrawModelWires');
  late final _DrawModelWires = _DrawModelWiresPtr.asFunction<
      void Function(RLModel, RLVector3, double, RLColor)>();

  void DrawModelWiresEx(
    RLModel model,
    RLVector3 position,
    RLVector3 rotationAxis,
    double rotationAngle,
    RLVector3 scale,
    RLColor tint,
  ) {
    return _DrawModelWiresEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLModel, RLVector3, RLVector3, ffi.Float, RLVector3,
              RLColor)>>('DrawModelWiresEx');
  late final _DrawModelWiresEx = _DrawModelWiresExPtr.asFunction<
      void Function(
          RLModel, RLVector3, RLVector3, double, RLVector3, RLColor)>();

  void DrawBoundingBox(
    RLBoundingBox box,
    RLColor color,
  ) {
    return _DrawBoundingBox(
      box,
      color,
    );
  }

  late final _DrawBoundingBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLBoundingBox, RLColor)>>(
          'DrawBoundingBox');
  late final _DrawBoundingBox =
      _DrawBoundingBoxPtr.asFunction<void Function(RLBoundingBox, RLColor)>();

  void DrawBillboard(
    RLCamera camera,
    RLTexture2D texture,
    RLVector3 position,
    double size,
    RLColor tint,
  ) {
    return _DrawBillboard(
      camera,
      texture,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLCamera, RLTexture2D, RLVector3, ffi.Float,
              RLColor)>>('DrawBillboard');
  late final _DrawBillboard = _DrawBillboardPtr.asFunction<
      void Function(RLCamera, RLTexture2D, RLVector3, double, RLColor)>();

  void DrawBillboardRec(
    RLCamera camera,
    RLTexture2D texture,
    RLRectangle source,
    RLVector3 position,
    RLVector2 size,
    RLColor tint,
  ) {
    return _DrawBillboardRec(
      camera,
      texture,
      source,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLCamera, RLTexture2D, RLRectangle, RLVector3,
              RLVector2, RLColor)>>('DrawBillboardRec');
  late final _DrawBillboardRec = _DrawBillboardRecPtr.asFunction<
      void Function(
          RLCamera, RLTexture2D, RLRectangle, RLVector3, RLVector2, RLColor)>();

  void DrawBillboardPro(
    RLCamera camera,
    RLTexture2D texture,
    RLRectangle source,
    RLVector3 position,
    RLVector3 up,
    RLVector2 size,
    RLVector2 origin,
    double rotation,
    RLColor tint,
  ) {
    return _DrawBillboardPro(
      camera,
      texture,
      source,
      position,
      up,
      size,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawBillboardProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLCamera,
              RLTexture2D,
              RLRectangle,
              RLVector3,
              RLVector3,
              RLVector2,
              RLVector2,
              ffi.Float,
              RLColor)>>('DrawBillboardPro');
  late final _DrawBillboardPro = _DrawBillboardProPtr.asFunction<
      void Function(RLCamera, RLTexture2D, RLRectangle, RLVector3, RLVector3,
          RLVector2, RLVector2, double, RLColor)>();

  /// Mesh management functions
  void UploadMesh(
    ffi.Pointer<RLMesh> mesh,
    bool dynamic1,
  ) {
    return _UploadMesh(
      mesh,
      dynamic1,
    );
  }

  late final _UploadMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLMesh>, ffi.Bool)>>(
      'UploadMesh');
  late final _UploadMesh =
      _UploadMeshPtr.asFunction<void Function(ffi.Pointer<RLMesh>, bool)>();

  void UpdateMeshBuffer(
    RLMesh mesh,
    int index,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _UpdateMeshBuffer(
      mesh,
      index,
      data,
      dataSize,
      offset,
    );
  }

  late final _UpdateMeshBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLMesh, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('UpdateMeshBuffer');
  late final _UpdateMeshBuffer = _UpdateMeshBufferPtr.asFunction<
      void Function(RLMesh, int, ffi.Pointer<ffi.Void>, int, int)>();

  void UnloadMesh(
    RLMesh mesh,
  ) {
    return _UnloadMesh(
      mesh,
    );
  }

  late final _UnloadMeshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMesh)>>('UnloadMesh');
  late final _UnloadMesh = _UnloadMeshPtr.asFunction<void Function(RLMesh)>();

  void DrawMesh(
    RLMesh mesh,
    RLMaterial material,
    RLMatrix transform,
  ) {
    return _DrawMesh(
      mesh,
      material,
      transform,
    );
  }

  late final _DrawMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLMesh, RLMaterial, RLMatrix)>>(
      'DrawMesh');
  late final _DrawMesh =
      _DrawMeshPtr.asFunction<void Function(RLMesh, RLMaterial, RLMatrix)>();

  void DrawMeshInstanced(
    RLMesh mesh,
    RLMaterial material,
    ffi.Pointer<RLMatrix> transforms,
    int instances,
  ) {
    return _DrawMeshInstanced(
      mesh,
      material,
      transforms,
      instances,
    );
  }

  late final _DrawMeshInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLMesh, RLMaterial, ffi.Pointer<RLMatrix>,
              ffi.Int)>>('DrawMeshInstanced');
  late final _DrawMeshInstanced = _DrawMeshInstancedPtr.asFunction<
      void Function(RLMesh, RLMaterial, ffi.Pointer<RLMatrix>, int)>();

  bool ExportMesh(
    RLMesh mesh,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportMesh(
      mesh,
      fileName,
    );
  }

  late final _ExportMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(RLMesh, ffi.Pointer<ffi.Char>)>>(
      'ExportMesh');
  late final _ExportMesh =
      _ExportMeshPtr.asFunction<bool Function(RLMesh, ffi.Pointer<ffi.Char>)>();

  RLBoundingBox GetMeshBoundingBox(
    RLMesh mesh,
  ) {
    return _GetMeshBoundingBox(
      mesh,
    );
  }

  late final _GetMeshBoundingBoxPtr =
      _lookup<ffi.NativeFunction<RLBoundingBox Function(RLMesh)>>(
          'GetMeshBoundingBox');
  late final _GetMeshBoundingBox =
      _GetMeshBoundingBoxPtr.asFunction<RLBoundingBox Function(RLMesh)>();

  void GenMeshTangents(
    ffi.Pointer<RLMesh> mesh,
  ) {
    return _GenMeshTangents(
      mesh,
    );
  }

  late final _GenMeshTangentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RLMesh>)>>(
          'GenMeshTangents');
  late final _GenMeshTangents =
      _GenMeshTangentsPtr.asFunction<void Function(ffi.Pointer<RLMesh>)>();

  /// Mesh generation functions
  RLMesh GenMeshPoly(
    int sides,
    double radius,
  ) {
    return _GenMeshPoly(
      sides,
      radius,
    );
  }

  late final _GenMeshPolyPtr =
      _lookup<ffi.NativeFunction<RLMesh Function(ffi.Int, ffi.Float)>>(
          'GenMeshPoly');
  late final _GenMeshPoly =
      _GenMeshPolyPtr.asFunction<RLMesh Function(int, double)>();

  RLMesh GenMeshPlane(
    double width,
    double length,
    int resX,
    int resZ,
  ) {
    return _GenMeshPlane(
      width,
      length,
      resX,
      resZ,
    );
  }

  late final _GenMeshPlanePtr = _lookup<
      ffi.NativeFunction<
          RLMesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshPlane');
  late final _GenMeshPlane =
      _GenMeshPlanePtr.asFunction<RLMesh Function(double, double, int, int)>();

  RLMesh GenMeshCube(
    double width,
    double height,
    double length,
  ) {
    return _GenMeshCube(
      width,
      height,
      length,
    );
  }

  late final _GenMeshCubePtr = _lookup<
          ffi.NativeFunction<RLMesh Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'GenMeshCube');
  late final _GenMeshCube =
      _GenMeshCubePtr.asFunction<RLMesh Function(double, double, double)>();

  RLMesh GenMeshSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshSpherePtr =
      _lookup<ffi.NativeFunction<RLMesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshSphere');
  late final _GenMeshSphere =
      _GenMeshSpherePtr.asFunction<RLMesh Function(double, int, int)>();

  RLMesh GenMeshHemiSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshHemiSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshHemiSpherePtr =
      _lookup<ffi.NativeFunction<RLMesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshHemiSphere');
  late final _GenMeshHemiSphere =
      _GenMeshHemiSpherePtr.asFunction<RLMesh Function(double, int, int)>();

  RLMesh GenMeshCylinder(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCylinder(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshCylinderPtr = _lookup<
          ffi.NativeFunction<RLMesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
      'GenMeshCylinder');
  late final _GenMeshCylinder =
      _GenMeshCylinderPtr.asFunction<RLMesh Function(double, double, int)>();

  RLMesh GenMeshCone(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCone(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshConePtr = _lookup<
          ffi.NativeFunction<RLMesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
      'GenMeshCone');
  late final _GenMeshCone =
      _GenMeshConePtr.asFunction<RLMesh Function(double, double, int)>();

  RLMesh GenMeshTorus(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshTorus(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshTorusPtr = _lookup<
      ffi.NativeFunction<
          RLMesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshTorus');
  late final _GenMeshTorus =
      _GenMeshTorusPtr.asFunction<RLMesh Function(double, double, int, int)>();

  RLMesh GenMeshKnot(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshKnot(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshKnotPtr = _lookup<
      ffi.NativeFunction<
          RLMesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshKnot');
  late final _GenMeshKnot =
      _GenMeshKnotPtr.asFunction<RLMesh Function(double, double, int, int)>();

  RLMesh GenMeshHeightmap(
    RLImage heightmap,
    RLVector3 size,
  ) {
    return _GenMeshHeightmap(
      heightmap,
      size,
    );
  }

  late final _GenMeshHeightmapPtr =
      _lookup<ffi.NativeFunction<RLMesh Function(RLImage, RLVector3)>>(
          'GenMeshHeightmap');
  late final _GenMeshHeightmap =
      _GenMeshHeightmapPtr.asFunction<RLMesh Function(RLImage, RLVector3)>();

  RLMesh GenMeshCubicmap(
    RLImage cubicmap,
    RLVector3 cubeSize,
  ) {
    return _GenMeshCubicmap(
      cubicmap,
      cubeSize,
    );
  }

  late final _GenMeshCubicmapPtr =
      _lookup<ffi.NativeFunction<RLMesh Function(RLImage, RLVector3)>>(
          'GenMeshCubicmap');
  late final _GenMeshCubicmap =
      _GenMeshCubicmapPtr.asFunction<RLMesh Function(RLImage, RLVector3)>();

  /// Material loading/unloading functions
  ffi.Pointer<RLMaterial> LoadMaterials(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> materialCount,
  ) {
    return _LoadMaterials(
      fileName,
      materialCount,
    );
  }

  late final _LoadMaterialsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RLMaterial> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadMaterials');
  late final _LoadMaterials = _LoadMaterialsPtr.asFunction<
      ffi.Pointer<RLMaterial> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  RLMaterial LoadMaterialDefault() {
    return _LoadMaterialDefault();
  }

  late final _LoadMaterialDefaultPtr =
      _lookup<ffi.NativeFunction<RLMaterial Function()>>('LoadMaterialDefault');
  late final _LoadMaterialDefault =
      _LoadMaterialDefaultPtr.asFunction<RLMaterial Function()>();

  bool IsMaterialReady(
    RLMaterial material,
  ) {
    return _IsMaterialReady(
      material,
    );
  }

  late final _IsMaterialReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLMaterial)>>(
          'IsMaterialReady');
  late final _IsMaterialReady =
      _IsMaterialReadyPtr.asFunction<bool Function(RLMaterial)>();

  void UnloadMaterial(
    RLMaterial material,
  ) {
    return _UnloadMaterial(
      material,
    );
  }

  late final _UnloadMaterialPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMaterial)>>(
          'UnloadMaterial');
  late final _UnloadMaterial =
      _UnloadMaterialPtr.asFunction<void Function(RLMaterial)>();

  void SetMaterialTexture(
    ffi.Pointer<RLMaterial> material,
    int mapType,
    RLTexture2D texture,
  ) {
    return _SetMaterialTexture(
      material,
      mapType,
      texture,
    );
  }

  late final _SetMaterialTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLMaterial>, ffi.Int,
              RLTexture2D)>>('SetMaterialTexture');
  late final _SetMaterialTexture = _SetMaterialTexturePtr.asFunction<
      void Function(ffi.Pointer<RLMaterial>, int, RLTexture2D)>();

  void SetModelMeshMaterial(
    ffi.Pointer<RLModel> model,
    int meshId,
    int materialId,
  ) {
    return _SetModelMeshMaterial(
      model,
      meshId,
      materialId,
    );
  }

  late final _SetModelMeshMaterialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLModel>, ffi.Int, ffi.Int)>>('SetModelMeshMaterial');
  late final _SetModelMeshMaterial = _SetModelMeshMaterialPtr.asFunction<
      void Function(ffi.Pointer<RLModel>, int, int)>();

  /// Model animations loading/unloading functions
  ffi.Pointer<RLModelAnimation> LoadModelAnimations(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> animCount,
  ) {
    return _LoadModelAnimations(
      fileName,
      animCount,
    );
  }

  late final _LoadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RLModelAnimation> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('LoadModelAnimations');
  late final _LoadModelAnimations = _LoadModelAnimationsPtr.asFunction<
      ffi.Pointer<RLModelAnimation> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UpdateModelAnimation(
    RLModel model,
    RLModelAnimation anim,
    int frame,
  ) {
    return _UpdateModelAnimation(
      model,
      anim,
      frame,
    );
  }

  late final _UpdateModelAnimationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLModel, RLModelAnimation, ffi.Int)>>('UpdateModelAnimation');
  late final _UpdateModelAnimation = _UpdateModelAnimationPtr.asFunction<
      void Function(RLModel, RLModelAnimation, int)>();

  void UnloadModelAnimation(
    RLModelAnimation anim,
  ) {
    return _UnloadModelAnimation(
      anim,
    );
  }

  late final _UnloadModelAnimationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLModelAnimation)>>(
          'UnloadModelAnimation');
  late final _UnloadModelAnimation =
      _UnloadModelAnimationPtr.asFunction<void Function(RLModelAnimation)>();

  void UnloadModelAnimations(
    ffi.Pointer<RLModelAnimation> animations,
    int animCount,
  ) {
    return _UnloadModelAnimations(
      animations,
      animCount,
    );
  }

  late final _UnloadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RLModelAnimation>,
              ffi.Int)>>('UnloadModelAnimations');
  late final _UnloadModelAnimations = _UnloadModelAnimationsPtr.asFunction<
      void Function(ffi.Pointer<RLModelAnimation>, int)>();

  bool IsModelAnimationValid(
    RLModel model,
    RLModelAnimation anim,
  ) {
    return _IsModelAnimationValid(
      model,
      anim,
    );
  }

  late final _IsModelAnimationValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLModel, RLModelAnimation)>>(
          'IsModelAnimationValid');
  late final _IsModelAnimationValid = _IsModelAnimationValidPtr.asFunction<
      bool Function(RLModel, RLModelAnimation)>();

  /// Collision detection functions
  bool CheckCollisionSpheres(
    RLVector3 center1,
    double radius1,
    RLVector3 center2,
    double radius2,
  ) {
    return _CheckCollisionSpheres(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionSpheresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(RLVector3, ffi.Float, RLVector3,
              ffi.Float)>>('CheckCollisionSpheres');
  late final _CheckCollisionSpheres = _CheckCollisionSpheresPtr.asFunction<
      bool Function(RLVector3, double, RLVector3, double)>();

  bool CheckCollisionBoxes(
    RLBoundingBox box1,
    RLBoundingBox box2,
  ) {
    return _CheckCollisionBoxes(
      box1,
      box2,
    );
  }

  late final _CheckCollisionBoxesPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(RLBoundingBox, RLBoundingBox)>>(
      'CheckCollisionBoxes');
  late final _CheckCollisionBoxes = _CheckCollisionBoxesPtr.asFunction<
      bool Function(RLBoundingBox, RLBoundingBox)>();

  bool CheckCollisionBoxSphere(
    RLBoundingBox box,
    RLVector3 center,
    double radius,
  ) {
    return _CheckCollisionBoxSphere(
      box,
      center,
      radius,
    );
  }

  late final _CheckCollisionBoxSpherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              RLBoundingBox, RLVector3, ffi.Float)>>('CheckCollisionBoxSphere');
  late final _CheckCollisionBoxSphere = _CheckCollisionBoxSpherePtr.asFunction<
      bool Function(RLBoundingBox, RLVector3, double)>();

  RLRayCollision GetRayCollisionSphere(
    RLRay ray,
    RLVector3 center,
    double radius,
  ) {
    return _GetRayCollisionSphere(
      ray,
      center,
      radius,
    );
  }

  late final _GetRayCollisionSpherePtr = _lookup<
      ffi.NativeFunction<
          RLRayCollision Function(
              RLRay, RLVector3, ffi.Float)>>('GetRayCollisionSphere');
  late final _GetRayCollisionSphere = _GetRayCollisionSpherePtr.asFunction<
      RLRayCollision Function(RLRay, RLVector3, double)>();

  RLRayCollision GetRayCollisionBox(
    RLRay ray,
    RLBoundingBox box,
  ) {
    return _GetRayCollisionBox(
      ray,
      box,
    );
  }

  late final _GetRayCollisionBoxPtr = _lookup<
          ffi.NativeFunction<RLRayCollision Function(RLRay, RLBoundingBox)>>(
      'GetRayCollisionBox');
  late final _GetRayCollisionBox = _GetRayCollisionBoxPtr.asFunction<
      RLRayCollision Function(RLRay, RLBoundingBox)>();

  RLRayCollision GetRayCollisionMesh(
    RLRay ray,
    RLMesh mesh,
    RLMatrix transform,
  ) {
    return _GetRayCollisionMesh(
      ray,
      mesh,
      transform,
    );
  }

  late final _GetRayCollisionMeshPtr = _lookup<
          ffi.NativeFunction<RLRayCollision Function(RLRay, RLMesh, RLMatrix)>>(
      'GetRayCollisionMesh');
  late final _GetRayCollisionMesh = _GetRayCollisionMeshPtr.asFunction<
      RLRayCollision Function(RLRay, RLMesh, RLMatrix)>();

  RLRayCollision GetRayCollisionTriangle(
    RLRay ray,
    RLVector3 p1,
    RLVector3 p2,
    RLVector3 p3,
  ) {
    return _GetRayCollisionTriangle(
      ray,
      p1,
      p2,
      p3,
    );
  }

  late final _GetRayCollisionTrianglePtr = _lookup<
      ffi.NativeFunction<
          RLRayCollision Function(RLRay, RLVector3, RLVector3,
              RLVector3)>>('GetRayCollisionTriangle');
  late final _GetRayCollisionTriangle = _GetRayCollisionTrianglePtr.asFunction<
      RLRayCollision Function(RLRay, RLVector3, RLVector3, RLVector3)>();

  RLRayCollision GetRayCollisionQuad(
    RLRay ray,
    RLVector3 p1,
    RLVector3 p2,
    RLVector3 p3,
    RLVector3 p4,
  ) {
    return _GetRayCollisionQuad(
      ray,
      p1,
      p2,
      p3,
      p4,
    );
  }

  late final _GetRayCollisionQuadPtr = _lookup<
      ffi.NativeFunction<
          RLRayCollision Function(RLRay, RLVector3, RLVector3, RLVector3,
              RLVector3)>>('GetRayCollisionQuad');
  late final _GetRayCollisionQuad = _GetRayCollisionQuadPtr.asFunction<
      RLRayCollision Function(
          RLRay, RLVector3, RLVector3, RLVector3, RLVector3)>();

  /// Audio device management functions
  void InitAudioDevice() {
    return _InitAudioDevice();
  }

  late final _InitAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('InitAudioDevice');
  late final _InitAudioDevice =
      _InitAudioDevicePtr.asFunction<void Function()>();

  void CloseAudioDevice() {
    return _CloseAudioDevice();
  }

  late final _CloseAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseAudioDevice');
  late final _CloseAudioDevice =
      _CloseAudioDevicePtr.asFunction<void Function()>();

  bool IsAudioDeviceReady() {
    return _IsAudioDeviceReady();
  }

  late final _IsAudioDeviceReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsAudioDeviceReady');
  late final _IsAudioDeviceReady =
      _IsAudioDeviceReadyPtr.asFunction<bool Function()>();

  void SetMasterVolume(
    double volume,
  ) {
    return _SetMasterVolume(
      volume,
    );
  }

  late final _SetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetMasterVolume');
  late final _SetMasterVolume =
      _SetMasterVolumePtr.asFunction<void Function(double)>();

  double GetMasterVolume() {
    return _GetMasterVolume();
  }

  late final _GetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMasterVolume');
  late final _GetMasterVolume =
      _GetMasterVolumePtr.asFunction<double Function()>();

  /// Wave/Sound loading/unloading functions
  RLWave LoadWave(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadWave(
      fileName,
    );
  }

  late final _LoadWavePtr =
      _lookup<ffi.NativeFunction<RLWave Function(ffi.Pointer<ffi.Char>)>>(
          'LoadWave');
  late final _LoadWave =
      _LoadWavePtr.asFunction<RLWave Function(ffi.Pointer<ffi.Char>)>();

  RLWave LoadWaveFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadWaveFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadWaveFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          RLWave Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadWaveFromMemory');
  late final _LoadWaveFromMemory = _LoadWaveFromMemoryPtr.asFunction<
      RLWave Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsWaveReady(
    RLWave wave,
  ) {
    return _IsWaveReady(
      wave,
    );
  }

  late final _IsWaveReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLWave)>>('IsWaveReady');
  late final _IsWaveReady = _IsWaveReadyPtr.asFunction<bool Function(RLWave)>();

  RLSound LoadSound(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadSound(
      fileName,
    );
  }

  late final _LoadSoundPtr =
      _lookup<ffi.NativeFunction<RLSound Function(ffi.Pointer<ffi.Char>)>>(
          'LoadSound');
  late final _LoadSound =
      _LoadSoundPtr.asFunction<RLSound Function(ffi.Pointer<ffi.Char>)>();

  RLSound LoadSoundFromWave(
    RLWave wave,
  ) {
    return _LoadSoundFromWave(
      wave,
    );
  }

  late final _LoadSoundFromWavePtr =
      _lookup<ffi.NativeFunction<RLSound Function(RLWave)>>(
          'LoadSoundFromWave');
  late final _LoadSoundFromWave =
      _LoadSoundFromWavePtr.asFunction<RLSound Function(RLWave)>();

  RLSound LoadSoundAlias(
    RLSound source,
  ) {
    return _LoadSoundAlias(
      source,
    );
  }

  late final _LoadSoundAliasPtr =
      _lookup<ffi.NativeFunction<RLSound Function(RLSound)>>('LoadSoundAlias');
  late final _LoadSoundAlias =
      _LoadSoundAliasPtr.asFunction<RLSound Function(RLSound)>();

  bool IsSoundReady(
    RLSound sound,
  ) {
    return _IsSoundReady(
      sound,
    );
  }

  late final _IsSoundReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLSound)>>('IsSoundReady');
  late final _IsSoundReady =
      _IsSoundReadyPtr.asFunction<bool Function(RLSound)>();

  void UpdateSound(
    RLSound sound,
    ffi.Pointer<ffi.Void> data,
    int sampleCount,
  ) {
    return _UpdateSound(
      sound,
      data,
      sampleCount,
    );
  }

  late final _UpdateSoundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              RLSound, ffi.Pointer<ffi.Void>, ffi.Int)>>('UpdateSound');
  late final _UpdateSound = _UpdateSoundPtr.asFunction<
      void Function(RLSound, ffi.Pointer<ffi.Void>, int)>();

  void UnloadWave(
    RLWave wave,
  ) {
    return _UnloadWave(
      wave,
    );
  }

  late final _UnloadWavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLWave)>>('UnloadWave');
  late final _UnloadWave = _UnloadWavePtr.asFunction<void Function(RLWave)>();

  void UnloadSound(
    RLSound sound,
  ) {
    return _UnloadSound(
      sound,
    );
  }

  late final _UnloadSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>('UnloadSound');
  late final _UnloadSound =
      _UnloadSoundPtr.asFunction<void Function(RLSound)>();

  void UnloadSoundAlias(
    RLSound alias,
  ) {
    return _UnloadSoundAlias(
      alias,
    );
  }

  late final _UnloadSoundAliasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>(
          'UnloadSoundAlias');
  late final _UnloadSoundAlias =
      _UnloadSoundAliasPtr.asFunction<void Function(RLSound)>();

  bool ExportWave(
    RLWave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWave(
      wave,
      fileName,
    );
  }

  late final _ExportWavePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(RLWave, ffi.Pointer<ffi.Char>)>>(
      'ExportWave');
  late final _ExportWave =
      _ExportWavePtr.asFunction<bool Function(RLWave, ffi.Pointer<ffi.Char>)>();

  bool ExportWaveAsCode(
    RLWave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWaveAsCode(
      wave,
      fileName,
    );
  }

  late final _ExportWaveAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(RLWave, ffi.Pointer<ffi.Char>)>>(
      'ExportWaveAsCode');
  late final _ExportWaveAsCode = _ExportWaveAsCodePtr.asFunction<
      bool Function(RLWave, ffi.Pointer<ffi.Char>)>();

  /// Wave/Sound management functions
  void PlaySound(
    RLSound sound,
  ) {
    return _PlaySound(
      sound,
    );
  }

  late final _PlaySoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>('PlaySound');
  late final _PlaySound = _PlaySoundPtr.asFunction<void Function(RLSound)>();

  void StopSound(
    RLSound sound,
  ) {
    return _StopSound(
      sound,
    );
  }

  late final _StopSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>('StopSound');
  late final _StopSound = _StopSoundPtr.asFunction<void Function(RLSound)>();

  void PauseSound(
    RLSound sound,
  ) {
    return _PauseSound(
      sound,
    );
  }

  late final _PauseSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>('PauseSound');
  late final _PauseSound = _PauseSoundPtr.asFunction<void Function(RLSound)>();

  void ResumeSound(
    RLSound sound,
  ) {
    return _ResumeSound(
      sound,
    );
  }

  late final _ResumeSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound)>>('ResumeSound');
  late final _ResumeSound =
      _ResumeSoundPtr.asFunction<void Function(RLSound)>();

  bool IsSoundPlaying(
    RLSound sound,
  ) {
    return _IsSoundPlaying(
      sound,
    );
  }

  late final _IsSoundPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLSound)>>('IsSoundPlaying');
  late final _IsSoundPlaying =
      _IsSoundPlayingPtr.asFunction<bool Function(RLSound)>();

  void SetSoundVolume(
    RLSound sound,
    double volume,
  ) {
    return _SetSoundVolume(
      sound,
      volume,
    );
  }

  late final _SetSoundVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound, ffi.Float)>>(
          'SetSoundVolume');
  late final _SetSoundVolume =
      _SetSoundVolumePtr.asFunction<void Function(RLSound, double)>();

  void SetSoundPitch(
    RLSound sound,
    double pitch,
  ) {
    return _SetSoundPitch(
      sound,
      pitch,
    );
  }

  late final _SetSoundPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound, ffi.Float)>>(
          'SetSoundPitch');
  late final _SetSoundPitch =
      _SetSoundPitchPtr.asFunction<void Function(RLSound, double)>();

  void SetSoundPan(
    RLSound sound,
    double pan,
  ) {
    return _SetSoundPan(
      sound,
      pan,
    );
  }

  late final _SetSoundPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLSound, ffi.Float)>>(
          'SetSoundPan');
  late final _SetSoundPan =
      _SetSoundPanPtr.asFunction<void Function(RLSound, double)>();

  RLWave WaveCopy(
    RLWave wave,
  ) {
    return _WaveCopy(
      wave,
    );
  }

  late final _WaveCopyPtr =
      _lookup<ffi.NativeFunction<RLWave Function(RLWave)>>('WaveCopy');
  late final _WaveCopy = _WaveCopyPtr.asFunction<RLWave Function(RLWave)>();

  void WaveCrop(
    ffi.Pointer<RLWave> wave,
    int initSample,
    int finalSample,
  ) {
    return _WaveCrop(
      wave,
      initSample,
      finalSample,
    );
  }

  late final _WaveCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLWave>, ffi.Int, ffi.Int)>>('WaveCrop');
  late final _WaveCrop =
      _WaveCropPtr.asFunction<void Function(ffi.Pointer<RLWave>, int, int)>();

  void WaveFormat(
    ffi.Pointer<RLWave> wave,
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _WaveFormat(
      wave,
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _WaveFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RLWave>, ffi.Int, ffi.Int, ffi.Int)>>('WaveFormat');
  late final _WaveFormat = _WaveFormatPtr.asFunction<
      void Function(ffi.Pointer<RLWave>, int, int, int)>();

  ffi.Pointer<ffi.Float> LoadWaveSamples(
    RLWave wave,
  ) {
    return _LoadWaveSamples(
      wave,
    );
  }

  late final _LoadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(RLWave)>>(
          'LoadWaveSamples');
  late final _LoadWaveSamples =
      _LoadWaveSamplesPtr.asFunction<ffi.Pointer<ffi.Float> Function(RLWave)>();

  void UnloadWaveSamples(
    ffi.Pointer<ffi.Float> samples,
  ) {
    return _UnloadWaveSamples(
      samples,
    );
  }

  late final _UnloadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'UnloadWaveSamples');
  late final _UnloadWaveSamples =
      _UnloadWaveSamplesPtr.asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  /// Music management functions
  RLMusic LoadMusicStream(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadMusicStream(
      fileName,
    );
  }

  late final _LoadMusicStreamPtr =
      _lookup<ffi.NativeFunction<RLMusic Function(ffi.Pointer<ffi.Char>)>>(
          'LoadMusicStream');
  late final _LoadMusicStream =
      _LoadMusicStreamPtr.asFunction<RLMusic Function(ffi.Pointer<ffi.Char>)>();

  RLMusic LoadMusicStreamFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
  ) {
    return _LoadMusicStreamFromMemory(
      fileType,
      data,
      dataSize,
    );
  }

  late final _LoadMusicStreamFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          RLMusic Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadMusicStreamFromMemory');
  late final _LoadMusicStreamFromMemory =
      _LoadMusicStreamFromMemoryPtr.asFunction<
          RLMusic Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsMusicReady(
    RLMusic music,
  ) {
    return _IsMusicReady(
      music,
    );
  }

  late final _IsMusicReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLMusic)>>('IsMusicReady');
  late final _IsMusicReady =
      _IsMusicReadyPtr.asFunction<bool Function(RLMusic)>();

  void UnloadMusicStream(
    RLMusic music,
  ) {
    return _UnloadMusicStream(
      music,
    );
  }

  late final _UnloadMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'UnloadMusicStream');
  late final _UnloadMusicStream =
      _UnloadMusicStreamPtr.asFunction<void Function(RLMusic)>();

  void PlayMusicStream(
    RLMusic music,
  ) {
    return _PlayMusicStream(
      music,
    );
  }

  late final _PlayMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'PlayMusicStream');
  late final _PlayMusicStream =
      _PlayMusicStreamPtr.asFunction<void Function(RLMusic)>();

  bool IsMusicStreamPlaying(
    RLMusic music,
  ) {
    return _IsMusicStreamPlaying(
      music,
    );
  }

  late final _IsMusicStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLMusic)>>(
          'IsMusicStreamPlaying');
  late final _IsMusicStreamPlaying =
      _IsMusicStreamPlayingPtr.asFunction<bool Function(RLMusic)>();

  void UpdateMusicStream(
    RLMusic music,
  ) {
    return _UpdateMusicStream(
      music,
    );
  }

  late final _UpdateMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'UpdateMusicStream');
  late final _UpdateMusicStream =
      _UpdateMusicStreamPtr.asFunction<void Function(RLMusic)>();

  void StopMusicStream(
    RLMusic music,
  ) {
    return _StopMusicStream(
      music,
    );
  }

  late final _StopMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'StopMusicStream');
  late final _StopMusicStream =
      _StopMusicStreamPtr.asFunction<void Function(RLMusic)>();

  void PauseMusicStream(
    RLMusic music,
  ) {
    return _PauseMusicStream(
      music,
    );
  }

  late final _PauseMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'PauseMusicStream');
  late final _PauseMusicStream =
      _PauseMusicStreamPtr.asFunction<void Function(RLMusic)>();

  void ResumeMusicStream(
    RLMusic music,
  ) {
    return _ResumeMusicStream(
      music,
    );
  }

  late final _ResumeMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic)>>(
          'ResumeMusicStream');
  late final _ResumeMusicStream =
      _ResumeMusicStreamPtr.asFunction<void Function(RLMusic)>();

  void SeekMusicStream(
    RLMusic music,
    double position,
  ) {
    return _SeekMusicStream(
      music,
      position,
    );
  }

  late final _SeekMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic, ffi.Float)>>(
          'SeekMusicStream');
  late final _SeekMusicStream =
      _SeekMusicStreamPtr.asFunction<void Function(RLMusic, double)>();

  void SetMusicVolume(
    RLMusic music,
    double volume,
  ) {
    return _SetMusicVolume(
      music,
      volume,
    );
  }

  late final _SetMusicVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic, ffi.Float)>>(
          'SetMusicVolume');
  late final _SetMusicVolume =
      _SetMusicVolumePtr.asFunction<void Function(RLMusic, double)>();

  void SetMusicPitch(
    RLMusic music,
    double pitch,
  ) {
    return _SetMusicPitch(
      music,
      pitch,
    );
  }

  late final _SetMusicPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic, ffi.Float)>>(
          'SetMusicPitch');
  late final _SetMusicPitch =
      _SetMusicPitchPtr.asFunction<void Function(RLMusic, double)>();

  void SetMusicPan(
    RLMusic music,
    double pan,
  ) {
    return _SetMusicPan(
      music,
      pan,
    );
  }

  late final _SetMusicPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLMusic, ffi.Float)>>(
          'SetMusicPan');
  late final _SetMusicPan =
      _SetMusicPanPtr.asFunction<void Function(RLMusic, double)>();

  double GetMusicTimeLength(
    RLMusic music,
  ) {
    return _GetMusicTimeLength(
      music,
    );
  }

  late final _GetMusicTimeLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(RLMusic)>>(
          'GetMusicTimeLength');
  late final _GetMusicTimeLength =
      _GetMusicTimeLengthPtr.asFunction<double Function(RLMusic)>();

  double GetMusicTimePlayed(
    RLMusic music,
  ) {
    return _GetMusicTimePlayed(
      music,
    );
  }

  late final _GetMusicTimePlayedPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(RLMusic)>>(
          'GetMusicTimePlayed');
  late final _GetMusicTimePlayed =
      _GetMusicTimePlayedPtr.asFunction<double Function(RLMusic)>();

  /// AudioStream management functions
  RLAudioStream LoadAudioStream(
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _LoadAudioStream(
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _LoadAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          RLAudioStream Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('LoadAudioStream');
  late final _LoadAudioStream =
      _LoadAudioStreamPtr.asFunction<RLAudioStream Function(int, int, int)>();

  bool IsAudioStreamReady(
    RLAudioStream stream,
  ) {
    return _IsAudioStreamReady(
      stream,
    );
  }

  late final _IsAudioStreamReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLAudioStream)>>(
          'IsAudioStreamReady');
  late final _IsAudioStreamReady =
      _IsAudioStreamReadyPtr.asFunction<bool Function(RLAudioStream)>();

  void UnloadAudioStream(
    RLAudioStream stream,
  ) {
    return _UnloadAudioStream(
      stream,
    );
  }

  late final _UnloadAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream)>>(
          'UnloadAudioStream');
  late final _UnloadAudioStream =
      _UnloadAudioStreamPtr.asFunction<void Function(RLAudioStream)>();

  void UpdateAudioStream(
    RLAudioStream stream,
    ffi.Pointer<ffi.Void> data,
    int frameCount,
  ) {
    return _UpdateAudioStream(
      stream,
      data,
      frameCount,
    );
  }

  late final _UpdateAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RLAudioStream, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('UpdateAudioStream');
  late final _UpdateAudioStream = _UpdateAudioStreamPtr.asFunction<
      void Function(RLAudioStream, ffi.Pointer<ffi.Void>, int)>();

  bool IsAudioStreamProcessed(
    RLAudioStream stream,
  ) {
    return _IsAudioStreamProcessed(
      stream,
    );
  }

  late final _IsAudioStreamProcessedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLAudioStream)>>(
          'IsAudioStreamProcessed');
  late final _IsAudioStreamProcessed =
      _IsAudioStreamProcessedPtr.asFunction<bool Function(RLAudioStream)>();

  void PlayAudioStream(
    RLAudioStream stream,
  ) {
    return _PlayAudioStream(
      stream,
    );
  }

  late final _PlayAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream)>>(
          'PlayAudioStream');
  late final _PlayAudioStream =
      _PlayAudioStreamPtr.asFunction<void Function(RLAudioStream)>();

  void PauseAudioStream(
    RLAudioStream stream,
  ) {
    return _PauseAudioStream(
      stream,
    );
  }

  late final _PauseAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream)>>(
          'PauseAudioStream');
  late final _PauseAudioStream =
      _PauseAudioStreamPtr.asFunction<void Function(RLAudioStream)>();

  void ResumeAudioStream(
    RLAudioStream stream,
  ) {
    return _ResumeAudioStream(
      stream,
    );
  }

  late final _ResumeAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream)>>(
          'ResumeAudioStream');
  late final _ResumeAudioStream =
      _ResumeAudioStreamPtr.asFunction<void Function(RLAudioStream)>();

  bool IsAudioStreamPlaying(
    RLAudioStream stream,
  ) {
    return _IsAudioStreamPlaying(
      stream,
    );
  }

  late final _IsAudioStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RLAudioStream)>>(
          'IsAudioStreamPlaying');
  late final _IsAudioStreamPlaying =
      _IsAudioStreamPlayingPtr.asFunction<bool Function(RLAudioStream)>();

  void StopAudioStream(
    RLAudioStream stream,
  ) {
    return _StopAudioStream(
      stream,
    );
  }

  late final _StopAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream)>>(
          'StopAudioStream');
  late final _StopAudioStream =
      _StopAudioStreamPtr.asFunction<void Function(RLAudioStream)>();

  void SetAudioStreamVolume(
    RLAudioStream stream,
    double volume,
  ) {
    return _SetAudioStreamVolume(
      stream,
      volume,
    );
  }

  late final _SetAudioStreamVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream, ffi.Float)>>(
          'SetAudioStreamVolume');
  late final _SetAudioStreamVolume = _SetAudioStreamVolumePtr.asFunction<
      void Function(RLAudioStream, double)>();

  void SetAudioStreamPitch(
    RLAudioStream stream,
    double pitch,
  ) {
    return _SetAudioStreamPitch(
      stream,
      pitch,
    );
  }

  late final _SetAudioStreamPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream, ffi.Float)>>(
          'SetAudioStreamPitch');
  late final _SetAudioStreamPitch = _SetAudioStreamPitchPtr.asFunction<
      void Function(RLAudioStream, double)>();

  void SetAudioStreamPan(
    RLAudioStream stream,
    double pan,
  ) {
    return _SetAudioStreamPan(
      stream,
      pan,
    );
  }

  late final _SetAudioStreamPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RLAudioStream, ffi.Float)>>(
          'SetAudioStreamPan');
  late final _SetAudioStreamPan =
      _SetAudioStreamPanPtr.asFunction<void Function(RLAudioStream, double)>();

  void SetAudioStreamBufferSizeDefault(
    int size,
  ) {
    return _SetAudioStreamBufferSizeDefault(
      size,
    );
  }

  late final _SetAudioStreamBufferSizeDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAudioStreamBufferSizeDefault');
  late final _SetAudioStreamBufferSizeDefault =
      _SetAudioStreamBufferSizeDefaultPtr.asFunction<void Function(int)>();

  void SetAudioStreamCallback(
    RLAudioStream stream,
    AudioCallback callback,
  ) {
    return _SetAudioStreamCallback(
      stream,
      callback,
    );
  }

  late final _SetAudioStreamCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLAudioStream, AudioCallback)>>(
      'SetAudioStreamCallback');
  late final _SetAudioStreamCallback = _SetAudioStreamCallbackPtr.asFunction<
      void Function(RLAudioStream, AudioCallback)>();

  void AttachAudioStreamProcessor(
    RLAudioStream stream,
    AudioCallback processor,
  ) {
    return _AttachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _AttachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLAudioStream, AudioCallback)>>(
      'AttachAudioStreamProcessor');
  late final _AttachAudioStreamProcessor = _AttachAudioStreamProcessorPtr
      .asFunction<void Function(RLAudioStream, AudioCallback)>();

  void DetachAudioStreamProcessor(
    RLAudioStream stream,
    AudioCallback processor,
  ) {
    return _DetachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _DetachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(RLAudioStream, AudioCallback)>>(
      'DetachAudioStreamProcessor');
  late final _DetachAudioStreamProcessor = _DetachAudioStreamProcessorPtr
      .asFunction<void Function(RLAudioStream, AudioCallback)>();

  void AttachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _AttachAudioMixedProcessor(
      processor,
    );
  }

  late final _AttachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'AttachAudioMixedProcessor');
  late final _AttachAudioMixedProcessor =
      _AttachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();

  void DetachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _DetachAudioMixedProcessor(
      processor,
    );
  }

  late final _DetachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'DetachAudioMixedProcessor');
  late final _DetachAudioMixedProcessor =
      _DetachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();
}

/// Vector2, 2 components
final class RLVector2 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;
}

/// Vector3, 3 components
final class RLVector3 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;
}

/// Vector4, 4 components
final class RLVector4 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;

  /// Vector w component
  @ffi.Float()
  external double w;
}

/// Matrix, 4x4 components, column major, OpenGL style, right-handed
final class RLMatrix extends ffi.Struct {
  /// Matrix first row (4 components)
  @ffi.Float()
  external double m0;

  @ffi.Float()
  external double m4;

  @ffi.Float()
  external double m8;

  @ffi.Float()
  external double m12;

  /// Matrix second row (4 components)
  @ffi.Float()
  external double m1;

  @ffi.Float()
  external double m5;

  @ffi.Float()
  external double m9;

  @ffi.Float()
  external double m13;

  /// Matrix third row (4 components)
  @ffi.Float()
  external double m2;

  @ffi.Float()
  external double m6;

  @ffi.Float()
  external double m10;

  @ffi.Float()
  external double m14;

  /// Matrix fourth row (4 components)
  @ffi.Float()
  external double m3;

  @ffi.Float()
  external double m7;

  @ffi.Float()
  external double m11;

  @ffi.Float()
  external double m15;
}

/// Color, 4 components, R8G8B8A8 (32bit)
final class RLColor extends ffi.Struct {
  /// Color red value
  @ffi.UnsignedChar()
  external int r;

  /// Color green value
  @ffi.UnsignedChar()
  external int g;

  /// Color blue value
  @ffi.UnsignedChar()
  external int b;

  /// Color alpha value
  @ffi.UnsignedChar()
  external int a;
}

/// Rectangle, 4 components
final class RLRectangle extends ffi.Struct {
  /// Rectangle top-left corner position x
  @ffi.Float()
  external double x;

  /// Rectangle top-left corner position y
  @ffi.Float()
  external double y;

  /// Rectangle width
  @ffi.Float()
  external double width;

  /// Rectangle height
  @ffi.Float()
  external double height;
}

/// Image, pixel data stored in CPU memory (RAM)
final class RLImage extends ffi.Struct {
  /// Image raw data
  external ffi.Pointer<ffi.Void> data;

  /// Image base width
  @ffi.Int()
  external int width;

  /// Image base height
  @ffi.Int()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int()
  external int format;
}

/// Texture, tex data stored in GPU memory (VRAM)
final class RLTexture extends ffi.Struct {
  /// OpenGL texture id
  @ffi.UnsignedInt()
  external int id;

  /// Texture base width
  @ffi.Int()
  external int width;

  /// Texture base height
  @ffi.Int()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int()
  external int format;
}

/// RenderTexture, fbo for texture rendering
final class RLRenderTexture extends ffi.Struct {
  /// OpenGL framebuffer object id
  @ffi.UnsignedInt()
  external int id;

  /// Color buffer attachment texture
  external RLTexture texture;

  /// Depth buffer attachment texture
  external RLTexture depth;
}

/// NPatchInfo, n-patch layout info
final class RLNPatchInfo extends ffi.Struct {
  /// Texture source rectangle
  external RLRectangle source;

  /// Left border offset
  @ffi.Int()
  external int left;

  /// Top border offset
  @ffi.Int()
  external int top;

  /// Right border offset
  @ffi.Int()
  external int right;

  /// Bottom border offset
  @ffi.Int()
  external int bottom;

  /// Layout of the n-patch: 3x3, 1x3 or 3x1
  @ffi.Int()
  external int layout;
}

/// GlyphInfo, font characters glyphs info
final class RLGlyphInfo extends ffi.Struct {
  /// Character value (Unicode)
  @ffi.Int()
  external int value;

  /// Character offset X when drawing
  @ffi.Int()
  external int offsetX;

  /// Character offset Y when drawing
  @ffi.Int()
  external int offsetY;

  /// Character advance position X
  @ffi.Int()
  external int advanceX;

  /// Character image data
  external RLImage image;
}

/// Font, font texture and GlyphInfo array data
final class RLFont extends ffi.Struct {
  /// Base size (default chars height)
  @ffi.Int()
  external int baseSize;

  /// Number of glyph characters
  @ffi.Int()
  external int glyphCount;

  /// Padding around the glyph characters
  @ffi.Int()
  external int glyphPadding;

  /// Texture atlas containing the glyphs
  external RLTexture2D texture;

  /// Rectangles in texture for the glyphs
  external ffi.Pointer<RLRectangle> recs;

  /// Glyphs info data
  external ffi.Pointer<RLGlyphInfo> glyphs;
}

/// Texture2D, same as Texture
typedef RLTexture2D = RLTexture;

/// Camera, defines position/orientation in 3d space
final class RLCamera3D extends ffi.Struct {
  /// Camera position
  external RLVector3 position;

  /// Camera target it looks-at
  external RLVector3 target;

  /// Camera up vector (rotation over its axis)
  external RLVector3 up;

  /// Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  @ffi.Float()
  external double fovy;

  /// Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
  @ffi.Int()
  external int projection;
}

/// Camera2D, defines position/orientation in 2d space
final class RLCamera2D extends ffi.Struct {
  /// Camera offset (displacement from target)
  external RLVector2 offset;

  /// Camera target (rotation and zoom origin)
  external RLVector2 target;

  /// Camera rotation in degrees
  @ffi.Float()
  external double rotation;

  /// Camera zoom (scaling), should be 1.0f by default
  @ffi.Float()
  external double zoom;
}

/// Mesh, vertex data and vao/vbo
final class RLMesh extends ffi.Struct {
  /// Number of vertices stored in arrays
  @ffi.Int()
  external int vertexCount;

  /// Number of triangles stored (indexed or not)
  @ffi.Int()
  external int triangleCount;

  /// Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  external ffi.Pointer<ffi.Float> vertices;

  /// Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  external ffi.Pointer<ffi.Float> texcoords;

  /// Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  external ffi.Pointer<ffi.Float> texcoords2;

  /// Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  external ffi.Pointer<ffi.Float> normals;

  /// Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  external ffi.Pointer<ffi.Float> tangents;

  /// Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  external ffi.Pointer<ffi.UnsignedChar> colors;

  /// Vertex indices (in case vertex data comes indexed)
  external ffi.Pointer<ffi.UnsignedShort> indices;

  /// Animated vertex positions (after bones transformations)
  external ffi.Pointer<ffi.Float> animVertices;

  /// Animated normals (after bones transformations)
  external ffi.Pointer<ffi.Float> animNormals;

  /// Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.UnsignedChar> boneIds;

  /// Vertex bone weight, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.Float> boneWeights;

  /// OpenGL Vertex Array Object id
  @ffi.UnsignedInt()
  external int vaoId;

  /// OpenGL Vertex Buffer Objects id (default vertex data)
  external ffi.Pointer<ffi.UnsignedInt> vboId;
}

/// Shader
final class RLShader extends ffi.Struct {
  /// Shader program id
  @ffi.UnsignedInt()
  external int id;

  /// Shader locations array (RL_MAX_SHADER_LOCATIONS)
  external ffi.Pointer<ffi.Int> locs;
}

/// MaterialMap
final class RLMaterialMap extends ffi.Struct {
  /// Material map texture
  external RLTexture2D texture;

  /// Material map color
  external RLColor color;

  /// Material map value
  @ffi.Float()
  external double value;
}

/// Material, includes shader and maps
final class RLMaterial extends ffi.Struct {
  /// Material shader
  external RLShader shader;

  /// Material maps array (MAX_MATERIAL_MAPS)
  external ffi.Pointer<RLMaterialMap> maps;

  /// Material generic parameters (if required)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> params;
}

/// Transform, vertex transformation data
final class RLTransform extends ffi.Struct {
  /// Translation
  external RLVector3 translation;

  /// Rotation
  external Quaternion rotation;

  /// Scale
  external RLVector3 scale;
}

/// Quaternion, 4 components (Vector4 alias)
typedef Quaternion = RLVector4;

/// Bone, skeletal animation bone
final class RLBoneInfo extends ffi.Struct {
  /// Bone name
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;

  /// Bone parent
  @ffi.Int()
  external int parent;
}

/// Model, meshes, materials and animation data
final class RLModel extends ffi.Struct {
  /// Local transform matrix
  external RLMatrix transform;

  /// Number of meshes
  @ffi.Int()
  external int meshCount;

  /// Number of materials
  @ffi.Int()
  external int materialCount;

  /// Meshes array
  external ffi.Pointer<RLMesh> meshes;

  /// Materials array
  external ffi.Pointer<RLMaterial> materials;

  /// Mesh material number
  external ffi.Pointer<ffi.Int> meshMaterial;

  /// Number of bones
  @ffi.Int()
  external int boneCount;

  /// Bones information (skeleton)
  external ffi.Pointer<RLBoneInfo> bones;

  /// Bones base transformation (pose)
  external ffi.Pointer<RLTransform> bindPose;
}

/// ModelAnimation
final class RLModelAnimation extends ffi.Struct {
  /// Number of bones
  @ffi.Int()
  external int boneCount;

  /// Number of animation frames
  @ffi.Int()
  external int frameCount;

  /// Bones information (skeleton)
  external ffi.Pointer<RLBoneInfo> bones;

  /// Poses array by frame
  external ffi.Pointer<ffi.Pointer<RLTransform>> framePoses;

  /// Animation name
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;
}

/// Ray, ray for raycasting
final class RLRay extends ffi.Struct {
  /// Ray position (origin)
  external RLVector3 position;

  /// Ray direction
  external RLVector3 direction;
}

/// RayCollision, ray hit information
final class RLRayCollision extends ffi.Struct {
  /// Did the ray hit something?
  @ffi.Bool()
  external bool hit;

  /// Distance to the nearest hit
  @ffi.Float()
  external double distance;

  /// Point of the nearest hit
  external RLVector3 point;

  /// Surface normal of hit
  external RLVector3 normal;
}

/// BoundingBox
final class RLBoundingBox extends ffi.Struct {
  /// Minimum vertex box-corner
  external RLVector3 min;

  /// Maximum vertex box-corner
  external RLVector3 max;
}

/// Wave, audio wave data
final class RLWave extends ffi.Struct {
  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;

  /// Frequency (samples per second)
  @ffi.UnsignedInt()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.UnsignedInt()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.UnsignedInt()
  external int channels;

  /// Buffer data pointer
  external ffi.Pointer<ffi.Void> data;
}

final class RAudioBuffer extends ffi.Opaque {}

final class RAudioProcessor extends ffi.Opaque {}

/// AudioStream, custom audio stream
final class RLAudioStream extends ffi.Struct {
  /// Pointer to internal data used by the audio system
  external ffi.Pointer<RAudioBuffer> buffer;

  /// Pointer to internal data processor, useful for audio effects
  external ffi.Pointer<RAudioProcessor> processor;

  /// Frequency (samples per second)
  @ffi.UnsignedInt()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.UnsignedInt()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.UnsignedInt()
  external int channels;
}

/// Sound
final class RLSound extends ffi.Struct {
  /// Audio stream
  external RLAudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;
}

/// Music, audio stream, anything longer than ~10 seconds should be streamed
final class RLMusic extends ffi.Struct {
  /// Audio stream
  external RLAudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;

  /// Music looping enable
  @ffi.Bool()
  external bool looping;

  /// Type of music context (audio filetype)
  @ffi.Int()
  external int ctxType;

  /// Audio context data, depends on type
  external ffi.Pointer<ffi.Void> ctxData;
}

/// VrDeviceInfo, Head-Mounted-Display device parameters
final class RLVrDeviceInfo extends ffi.Struct {
  /// Horizontal resolution in pixels
  @ffi.Int()
  external int hResolution;

  /// Vertical resolution in pixels
  @ffi.Int()
  external int vResolution;

  /// Horizontal size in meters
  @ffi.Float()
  external double hScreenSize;

  /// Vertical size in meters
  @ffi.Float()
  external double vScreenSize;

  /// Screen center in meters
  @ffi.Float()
  external double vScreenCenter;

  /// Distance between eye and display in meters
  @ffi.Float()
  external double eyeToScreenDistance;

  /// Lens separation distance in meters
  @ffi.Float()
  external double lensSeparationDistance;

  /// IPD (distance between pupils) in meters
  @ffi.Float()
  external double interpupillaryDistance;

  /// Lens distortion constant parameters
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> lensDistortionValues;

  /// Chromatic aberration correction parameters
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> chromaAbCorrection;
}

/// VrStereoConfig, VR stereo rendering configuration for simulator
final class RLVrStereoConfig extends ffi.Struct {
  /// VR projection matrices (per eye)
  @ffi.Array.multi([2])
  external ffi.Array<RLMatrix> projection;

  /// VR view offset matrices (per eye)
  @ffi.Array.multi([2])
  external ffi.Array<RLMatrix> viewOffset;

  /// VR left lens center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftLensCenter;

  /// VR right lens center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightLensCenter;

  /// VR left screen center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftScreenCenter;

  /// VR right screen center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightScreenCenter;

  /// VR distortion scale
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scale;

  /// VR distortion scale in
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scaleIn;
}

/// File path list
final class RLFilePathList extends ffi.Struct {
  /// Filepaths max entries
  @ffi.UnsignedInt()
  external int capacity;

  /// Filepaths entries count
  @ffi.UnsignedInt()
  external int count;

  /// Filepaths entries
  external ffi.Pointer<ffi.Pointer<ffi.Char>> paths;
}

/// Automation event
final class RLAutomationEvent extends ffi.Struct {
  /// Event frame
  @ffi.UnsignedInt()
  external int frame;

  /// Event type (AutomationEventType)
  @ffi.UnsignedInt()
  external int type;

  /// Event parameters (if required)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> params;
}

/// Automation event list
final class RLAutomationEventList extends ffi.Struct {
  /// Events max entries (MAX_AUTOMATION_EVENTS)
  @ffi.UnsignedInt()
  external int capacity;

  /// Events entries count
  @ffi.UnsignedInt()
  external int count;

  /// Events entries
  external ffi.Pointer<RLAutomationEvent> events;
}

/// ----------------------------------------------------------------------------------
/// Enumerators Definition
/// ----------------------------------------------------------------------------------
/// System/Window config flags
/// NOTE: Every bit registers one state (use it with bit masks)
/// By default all flags are set to 0
abstract class ConfigFlags {
  /// Set to try enabling V-Sync on GPU
  static const int FLAG_VSYNC_HINT = 64;

  /// Set to run program in fullscreen
  static const int FLAG_FULLSCREEN_MODE = 2;

  /// Set to allow resizable window
  static const int FLAG_WINDOW_RESIZABLE = 4;

  /// Set to disable window decoration (frame and buttons)
  static const int FLAG_WINDOW_UNDECORATED = 8;

  /// Set to hide window
  static const int FLAG_WINDOW_HIDDEN = 128;

  /// Set to minimize window (iconify)
  static const int FLAG_WINDOW_MINIMIZED = 512;

  /// Set to maximize window (expanded to monitor)
  static const int FLAG_WINDOW_MAXIMIZED = 1024;

  /// Set to window non focused
  static const int FLAG_WINDOW_UNFOCUSED = 2048;

  /// Set to window always on top
  static const int FLAG_WINDOW_TOPMOST = 4096;

  /// Set to allow windows running while minimized
  static const int FLAG_WINDOW_ALWAYS_RUN = 256;

  /// Set to allow transparent framebuffer
  static const int FLAG_WINDOW_TRANSPARENT = 16;

  /// Set to support HighDPI
  static const int FLAG_WINDOW_HIGHDPI = 8192;

  /// Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
  static const int FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384;

  /// Set to run program in borderless windowed mode
  static const int FLAG_BORDERLESS_WINDOWED_MODE = 32768;

  /// Set to try enabling MSAA 4X
  static const int FLAG_MSAA_4X_HINT = 32;

  /// Set to try enabling interlaced video format (for V3D)
  static const int FLAG_INTERLACED_HINT = 65536;
}

/// Trace log level
/// NOTE: Organized by priority level
abstract class TraceLogLevel {
  /// Display all logs
  static const int LOG_ALL = 0;

  /// Trace logging, intended for internal use only
  static const int LOG_TRACE = 1;

  /// Debug logging, used for internal debugging, it should be disabled on release builds
  static const int LOG_DEBUG = 2;

  /// Info logging, used for program execution info
  static const int LOG_INFO = 3;

  /// Warning logging, used on recoverable failures
  static const int LOG_WARNING = 4;

  /// Error logging, used on unrecoverable failures
  static const int LOG_ERROR = 5;

  /// Fatal logging, used to abort program: exit(EXIT_FAILURE)
  static const int LOG_FATAL = 6;

  /// Disable logging
  static const int LOG_NONE = 7;
}

/// Keyboard keys (US keyboard layout)
/// NOTE: Use GetKeyPressed() to allow redefining
/// required keys for alternative layouts
abstract class KeyboardKey {
  /// Key: NULL, used for no key pressed
  static const int KEY_NULL = 0;

  /// Key: '
  static const int KEY_APOSTROPHE = 39;

  /// Key: ,
  static const int KEY_COMMA = 44;

  /// Key: -
  static const int KEY_MINUS = 45;

  /// Key: .
  static const int KEY_PERIOD = 46;

  /// Key: /
  static const int KEY_SLASH = 47;

  /// Key: 0
  static const int KEY_ZERO = 48;

  /// Key: 1
  static const int KEY_ONE = 49;

  /// Key: 2
  static const int KEY_TWO = 50;

  /// Key: 3
  static const int KEY_THREE = 51;

  /// Key: 4
  static const int KEY_FOUR = 52;

  /// Key: 5
  static const int KEY_FIVE = 53;

  /// Key: 6
  static const int KEY_SIX = 54;

  /// Key: 7
  static const int KEY_SEVEN = 55;

  /// Key: 8
  static const int KEY_EIGHT = 56;

  /// Key: 9
  static const int KEY_NINE = 57;

  /// Key: ;
  static const int KEY_SEMICOLON = 59;

  /// Key: =
  static const int KEY_EQUAL = 61;

  /// Key: A | a
  static const int KEY_A = 65;

  /// Key: B | b
  static const int KEY_B = 66;

  /// Key: C | c
  static const int KEY_C = 67;

  /// Key: D | d
  static const int KEY_D = 68;

  /// Key: E | e
  static const int KEY_E = 69;

  /// Key: F | f
  static const int KEY_F = 70;

  /// Key: G | g
  static const int KEY_G = 71;

  /// Key: H | h
  static const int KEY_H = 72;

  /// Key: I | i
  static const int KEY_I = 73;

  /// Key: J | j
  static const int KEY_J = 74;

  /// Key: K | k
  static const int KEY_K = 75;

  /// Key: L | l
  static const int KEY_L = 76;

  /// Key: M | m
  static const int KEY_M = 77;

  /// Key: N | n
  static const int KEY_N = 78;

  /// Key: O | o
  static const int KEY_O = 79;

  /// Key: P | p
  static const int KEY_P = 80;

  /// Key: Q | q
  static const int KEY_Q = 81;

  /// Key: R | r
  static const int KEY_R = 82;

  /// Key: S | s
  static const int KEY_S = 83;

  /// Key: T | t
  static const int KEY_T = 84;

  /// Key: U | u
  static const int KEY_U = 85;

  /// Key: V | v
  static const int KEY_V = 86;

  /// Key: W | w
  static const int KEY_W = 87;

  /// Key: X | x
  static const int KEY_X = 88;

  /// Key: Y | y
  static const int KEY_Y = 89;

  /// Key: Z | z
  static const int KEY_Z = 90;

  /// Key: [
  static const int KEY_LEFT_BRACKET = 91;

  /// Key: '\'
  static const int KEY_BACKSLASH = 92;

  /// Key: ]
  static const int KEY_RIGHT_BRACKET = 93;

  /// Key: `
  static const int KEY_GRAVE = 96;

  /// Key: Space
  static const int KEY_SPACE = 32;

  /// Key: Esc
  static const int KEY_ESCAPE = 256;

  /// Key: Enter
  static const int KEY_ENTER = 257;

  /// Key: Tab
  static const int KEY_TAB = 258;

  /// Key: Backspace
  static const int KEY_BACKSPACE = 259;

  /// Key: Ins
  static const int KEY_INSERT = 260;

  /// Key: Del
  static const int KEY_DELETE = 261;

  /// Key: Cursor right
  static const int KEY_RIGHT = 262;

  /// Key: Cursor left
  static const int KEY_LEFT = 263;

  /// Key: Cursor down
  static const int KEY_DOWN = 264;

  /// Key: Cursor up
  static const int KEY_UP = 265;

  /// Key: Page up
  static const int KEY_PAGE_UP = 266;

  /// Key: Page down
  static const int KEY_PAGE_DOWN = 267;

  /// Key: Home
  static const int KEY_HOME = 268;

  /// Key: End
  static const int KEY_END = 269;

  /// Key: Caps lock
  static const int KEY_CAPS_LOCK = 280;

  /// Key: Scroll down
  static const int KEY_SCROLL_LOCK = 281;

  /// Key: Num lock
  static const int KEY_NUM_LOCK = 282;

  /// Key: Print screen
  static const int KEY_PRINT_SCREEN = 283;

  /// Key: Pause
  static const int KEY_PAUSE = 284;

  /// Key: F1
  static const int KEY_F1 = 290;

  /// Key: F2
  static const int KEY_F2 = 291;

  /// Key: F3
  static const int KEY_F3 = 292;

  /// Key: F4
  static const int KEY_F4 = 293;

  /// Key: F5
  static const int KEY_F5 = 294;

  /// Key: F6
  static const int KEY_F6 = 295;

  /// Key: F7
  static const int KEY_F7 = 296;

  /// Key: F8
  static const int KEY_F8 = 297;

  /// Key: F9
  static const int KEY_F9 = 298;

  /// Key: F10
  static const int KEY_F10 = 299;

  /// Key: F11
  static const int KEY_F11 = 300;

  /// Key: F12
  static const int KEY_F12 = 301;

  /// Key: Shift left
  static const int KEY_LEFT_SHIFT = 340;

  /// Key: Control left
  static const int KEY_LEFT_CONTROL = 341;

  /// Key: Alt left
  static const int KEY_LEFT_ALT = 342;

  /// Key: Super left
  static const int KEY_LEFT_SUPER = 343;

  /// Key: Shift right
  static const int KEY_RIGHT_SHIFT = 344;

  /// Key: Control right
  static const int KEY_RIGHT_CONTROL = 345;

  /// Key: Alt right
  static const int KEY_RIGHT_ALT = 346;

  /// Key: Super right
  static const int KEY_RIGHT_SUPER = 347;

  /// Key: KB menu
  static const int KEY_KB_MENU = 348;

  /// Key: Keypad 0
  static const int KEY_KP_0 = 320;

  /// Key: Keypad 1
  static const int KEY_KP_1 = 321;

  /// Key: Keypad 2
  static const int KEY_KP_2 = 322;

  /// Key: Keypad 3
  static const int KEY_KP_3 = 323;

  /// Key: Keypad 4
  static const int KEY_KP_4 = 324;

  /// Key: Keypad 5
  static const int KEY_KP_5 = 325;

  /// Key: Keypad 6
  static const int KEY_KP_6 = 326;

  /// Key: Keypad 7
  static const int KEY_KP_7 = 327;

  /// Key: Keypad 8
  static const int KEY_KP_8 = 328;

  /// Key: Keypad 9
  static const int KEY_KP_9 = 329;

  /// Key: Keypad .
  static const int KEY_KP_DECIMAL = 330;

  /// Key: Keypad /
  static const int KEY_KP_DIVIDE = 331;

  /// Key: Keypad *
  static const int KEY_KP_MULTIPLY = 332;

  /// Key: Keypad -
  static const int KEY_KP_SUBTRACT = 333;

  /// Key: Keypad +
  static const int KEY_KP_ADD = 334;

  /// Key: Keypad Enter
  static const int KEY_KP_ENTER = 335;

  /// Key: Keypad =
  static const int KEY_KP_EQUAL = 336;

  /// Key: Android back button
  static const int KEY_BACK = 4;

  /// Key: Android menu button
  static const int KEY_MENU = 82;

  /// Key: Android volume up button
  static const int KEY_VOLUME_UP = 24;

  /// Key: Android volume down button
  static const int KEY_VOLUME_DOWN = 25;
}

/// Mouse buttons
abstract class MouseButton {
  /// Mouse button left
  static const int MOUSE_BUTTON_LEFT = 0;

  /// Mouse button right
  static const int MOUSE_BUTTON_RIGHT = 1;

  /// Mouse button middle (pressed wheel)
  static const int MOUSE_BUTTON_MIDDLE = 2;

  /// Mouse button side (advanced mouse device)
  static const int MOUSE_BUTTON_SIDE = 3;

  /// Mouse button extra (advanced mouse device)
  static const int MOUSE_BUTTON_EXTRA = 4;

  /// Mouse button forward (advanced mouse device)
  static const int MOUSE_BUTTON_FORWARD = 5;

  /// Mouse button back (advanced mouse device)
  static const int MOUSE_BUTTON_BACK = 6;
}

/// Mouse cursor
abstract class MouseCursor {
  /// Default pointer shape
  static const int MOUSE_CURSOR_DEFAULT = 0;

  /// Arrow shape
  static const int MOUSE_CURSOR_ARROW = 1;

  /// Text writing cursor shape
  static const int MOUSE_CURSOR_IBEAM = 2;

  /// Cross shape
  static const int MOUSE_CURSOR_CROSSHAIR = 3;

  /// Pointing hand cursor
  static const int MOUSE_CURSOR_POINTING_HAND = 4;

  /// Horizontal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_EW = 5;

  /// Vertical resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NS = 6;

  /// Top-left to bottom-right diagonal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NWSE = 7;

  /// The top-right to bottom-left diagonal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NESW = 8;

  /// The omnidirectional resize/move cursor shape
  static const int MOUSE_CURSOR_RESIZE_ALL = 9;

  /// The operation-not-allowed shape
  static const int MOUSE_CURSOR_NOT_ALLOWED = 10;
}

/// Gamepad buttons
abstract class GamepadButton {
  /// Unknown button, just for error checking
  static const int GAMEPAD_BUTTON_UNKNOWN = 0;

  /// Gamepad left DPAD up button
  static const int GAMEPAD_BUTTON_LEFT_FACE_UP = 1;

  /// Gamepad left DPAD right button
  static const int GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2;

  /// Gamepad left DPAD down button
  static const int GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3;

  /// Gamepad left DPAD left button
  static const int GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4;

  /// Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_UP = 5;

  /// Gamepad right button right (i.e. PS3: Square, Xbox: X)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6;

  /// Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7;

  /// Gamepad right button left (i.e. PS3: Circle, Xbox: B)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8;

  /// Gamepad top/back trigger left (first), it could be a trailing button
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9;

  /// Gamepad top/back trigger left (second), it could be a trailing button
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10;

  /// Gamepad top/back trigger right (one), it could be a trailing button
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11;

  /// Gamepad top/back trigger right (second), it could be a trailing button
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12;

  /// Gamepad center buttons, left one (i.e. PS3: Select)
  static const int GAMEPAD_BUTTON_MIDDLE_LEFT = 13;

  /// Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  static const int GAMEPAD_BUTTON_MIDDLE = 14;

  /// Gamepad center buttons, right one (i.e. PS3: Start)
  static const int GAMEPAD_BUTTON_MIDDLE_RIGHT = 15;

  /// Gamepad joystick pressed button left
  static const int GAMEPAD_BUTTON_LEFT_THUMB = 16;

  /// Gamepad joystick pressed button right
  static const int GAMEPAD_BUTTON_RIGHT_THUMB = 17;
}

/// Gamepad axis
abstract class GamepadAxis {
  /// Gamepad left stick X axis
  static const int GAMEPAD_AXIS_LEFT_X = 0;

  /// Gamepad left stick Y axis
  static const int GAMEPAD_AXIS_LEFT_Y = 1;

  /// Gamepad right stick X axis
  static const int GAMEPAD_AXIS_RIGHT_X = 2;

  /// Gamepad right stick Y axis
  static const int GAMEPAD_AXIS_RIGHT_Y = 3;

  /// Gamepad back trigger left, pressure level: [1..-1]
  static const int GAMEPAD_AXIS_LEFT_TRIGGER = 4;

  /// Gamepad back trigger right, pressure level: [1..-1]
  static const int GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
}

/// Material map index
abstract class MaterialMapIndex {
  /// Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  static const int MATERIAL_MAP_ALBEDO = 0;

  /// Metalness material (same as: MATERIAL_MAP_SPECULAR)
  static const int MATERIAL_MAP_METALNESS = 1;

  /// Normal material
  static const int MATERIAL_MAP_NORMAL = 2;

  /// Roughness material
  static const int MATERIAL_MAP_ROUGHNESS = 3;

  /// Ambient occlusion material
  static const int MATERIAL_MAP_OCCLUSION = 4;

  /// Emission material
  static const int MATERIAL_MAP_EMISSION = 5;

  /// Heightmap material
  static const int MATERIAL_MAP_HEIGHT = 6;

  /// Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_CUBEMAP = 7;

  /// Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_IRRADIANCE = 8;

  /// Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_PREFILTER = 9;

  /// Brdf material
  static const int MATERIAL_MAP_BRDF = 10;
}

/// Shader location index
abstract class ShaderLocationIndex {
  /// Shader location: vertex attribute: position
  static const int SHADER_LOC_VERTEX_POSITION = 0;

  /// Shader location: vertex attribute: texcoord01
  static const int SHADER_LOC_VERTEX_TEXCOORD01 = 1;

  /// Shader location: vertex attribute: texcoord02
  static const int SHADER_LOC_VERTEX_TEXCOORD02 = 2;

  /// Shader location: vertex attribute: normal
  static const int SHADER_LOC_VERTEX_NORMAL = 3;

  /// Shader location: vertex attribute: tangent
  static const int SHADER_LOC_VERTEX_TANGENT = 4;

  /// Shader location: vertex attribute: color
  static const int SHADER_LOC_VERTEX_COLOR = 5;

  /// Shader location: matrix uniform: model-view-projection
  static const int SHADER_LOC_MATRIX_MVP = 6;

  /// Shader location: matrix uniform: view (camera transform)
  static const int SHADER_LOC_MATRIX_VIEW = 7;

  /// Shader location: matrix uniform: projection
  static const int SHADER_LOC_MATRIX_PROJECTION = 8;

  /// Shader location: matrix uniform: model (transform)
  static const int SHADER_LOC_MATRIX_MODEL = 9;

  /// Shader location: matrix uniform: normal
  static const int SHADER_LOC_MATRIX_NORMAL = 10;

  /// Shader location: vector uniform: view
  static const int SHADER_LOC_VECTOR_VIEW = 11;

  /// Shader location: vector uniform: diffuse color
  static const int SHADER_LOC_COLOR_DIFFUSE = 12;

  /// Shader location: vector uniform: specular color
  static const int SHADER_LOC_COLOR_SPECULAR = 13;

  /// Shader location: vector uniform: ambient color
  static const int SHADER_LOC_COLOR_AMBIENT = 14;

  /// Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  static const int SHADER_LOC_MAP_ALBEDO = 15;

  /// Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  static const int SHADER_LOC_MAP_METALNESS = 16;

  /// Shader location: sampler2d texture: normal
  static const int SHADER_LOC_MAP_NORMAL = 17;

  /// Shader location: sampler2d texture: roughness
  static const int SHADER_LOC_MAP_ROUGHNESS = 18;

  /// Shader location: sampler2d texture: occlusion
  static const int SHADER_LOC_MAP_OCCLUSION = 19;

  /// Shader location: sampler2d texture: emission
  static const int SHADER_LOC_MAP_EMISSION = 20;

  /// Shader location: sampler2d texture: height
  static const int SHADER_LOC_MAP_HEIGHT = 21;

  /// Shader location: samplerCube texture: cubemap
  static const int SHADER_LOC_MAP_CUBEMAP = 22;

  /// Shader location: samplerCube texture: irradiance
  static const int SHADER_LOC_MAP_IRRADIANCE = 23;

  /// Shader location: samplerCube texture: prefilter
  static const int SHADER_LOC_MAP_PREFILTER = 24;

  /// Shader location: sampler2d texture: brdf
  static const int SHADER_LOC_MAP_BRDF = 25;
}

/// Shader uniform data type
abstract class ShaderUniformDataType {
  /// Shader uniform type: float
  static const int SHADER_UNIFORM_FLOAT = 0;

  /// Shader uniform type: vec2 (2 float)
  static const int SHADER_UNIFORM_VEC2 = 1;

  /// Shader uniform type: vec3 (3 float)
  static const int SHADER_UNIFORM_VEC3 = 2;

  /// Shader uniform type: vec4 (4 float)
  static const int SHADER_UNIFORM_VEC4 = 3;

  /// Shader uniform type: int
  static const int SHADER_UNIFORM_INT = 4;

  /// Shader uniform type: ivec2 (2 int)
  static const int SHADER_UNIFORM_IVEC2 = 5;

  /// Shader uniform type: ivec3 (3 int)
  static const int SHADER_UNIFORM_IVEC3 = 6;

  /// Shader uniform type: ivec4 (4 int)
  static const int SHADER_UNIFORM_IVEC4 = 7;

  /// Shader uniform type: sampler2d
  static const int SHADER_UNIFORM_SAMPLER2D = 8;
}

/// Shader attribute data types
abstract class ShaderAttributeDataType {
  /// Shader attribute type: float
  static const int SHADER_ATTRIB_FLOAT = 0;

  /// Shader attribute type: vec2 (2 float)
  static const int SHADER_ATTRIB_VEC2 = 1;

  /// Shader attribute type: vec3 (3 float)
  static const int SHADER_ATTRIB_VEC3 = 2;

  /// Shader attribute type: vec4 (4 float)
  static const int SHADER_ATTRIB_VEC4 = 3;
}

/// Pixel formats
/// NOTE: Support depends on OpenGL version and platform
abstract class PixelFormat {
  /// 8 bit per pixel (no alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1;

  /// 8*2 bpp (2 channels)
  static const int PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2;

  /// 16 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3;

  /// 24 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4;

  /// 16 bpp (1 bit alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5;

  /// 16 bpp (4 bit alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6;

  /// 32 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7;

  /// 32 bpp (1 channel - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32 = 8;

  /// 32*3 bpp (3 channels - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9;

  /// 32*4 bpp (4 channels - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10;

  /// 16 bpp (1 channel - half float)
  static const int PIXELFORMAT_UNCOMPRESSED_R16 = 11;

  /// 16*3 bpp (3 channels - half float)
  static const int PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12;

  /// 16*4 bpp (4 channels - half float)
  static const int PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13;

  /// 4 bpp (no alpha)
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGB = 14;

  /// 4 bpp (1 bit alpha)
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC1_RGB = 18;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC2_RGB = 19;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGB = 21;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23;

  /// 2 bpp
  static const int PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24;
}

/// Texture parameters: filter mode
/// NOTE 1: Filtering considers mipmaps if available in the texture
/// NOTE 2: Filter is accordingly set for minification and magnification
abstract class TextureFilter {
  /// No filter, just pixel approximation
  static const int TEXTURE_FILTER_POINT = 0;

  /// Linear filtering
  static const int TEXTURE_FILTER_BILINEAR = 1;

  /// Trilinear filtering (linear with mipmaps)
  static const int TEXTURE_FILTER_TRILINEAR = 2;

  /// Anisotropic filtering 4x
  static const int TEXTURE_FILTER_ANISOTROPIC_4X = 3;

  /// Anisotropic filtering 8x
  static const int TEXTURE_FILTER_ANISOTROPIC_8X = 4;

  /// Anisotropic filtering 16x
  static const int TEXTURE_FILTER_ANISOTROPIC_16X = 5;
}

/// Texture parameters: wrap mode
abstract class TextureWrap {
  /// Repeats texture in tiled mode
  static const int TEXTURE_WRAP_REPEAT = 0;

  /// Clamps texture to edge pixel in tiled mode
  static const int TEXTURE_WRAP_CLAMP = 1;

  /// Mirrors and repeats the texture in tiled mode
  static const int TEXTURE_WRAP_MIRROR_REPEAT = 2;

  /// Mirrors and clamps to border the texture in tiled mode
  static const int TEXTURE_WRAP_MIRROR_CLAMP = 3;
}

/// Cubemap layouts
abstract class CubemapLayout {
  /// Automatically detect layout type
  static const int CUBEMAP_LAYOUT_AUTO_DETECT = 0;

  /// Layout is defined by a vertical line with faces
  static const int CUBEMAP_LAYOUT_LINE_VERTICAL = 1;

  /// Layout is defined by a horizontal line with faces
  static const int CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2;

  /// Layout is defined by a 3x4 cross with cubemap faces
  static const int CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3;

  /// Layout is defined by a 4x3 cross with cubemap faces
  static const int CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4;

  /// Layout is defined by a panorama image (equirrectangular map)
  static const int CUBEMAP_LAYOUT_PANORAMA = 5;
}

/// Font type, defines generation method
abstract class FontType {
  /// Default font generation, anti-aliased
  static const int FONT_DEFAULT = 0;

  /// Bitmap font generation, no anti-aliasing
  static const int FONT_BITMAP = 1;

  /// SDF font generation, requires external shader
  static const int FONT_SDF = 2;
}

/// Color blending modes (pre-defined)
abstract class BlendMode {
  /// Blend textures considering alpha (default)
  static const int BLEND_ALPHA = 0;

  /// Blend textures adding colors
  static const int BLEND_ADDITIVE = 1;

  /// Blend textures multiplying colors
  static const int BLEND_MULTIPLIED = 2;

  /// Blend textures adding colors (alternative)
  static const int BLEND_ADD_COLORS = 3;

  /// Blend textures subtracting colors (alternative)
  static const int BLEND_SUBTRACT_COLORS = 4;

  /// Blend premultiplied textures considering alpha
  static const int BLEND_ALPHA_PREMULTIPLY = 5;

  /// Blend textures using custom src/dst factors (use rlSetBlendFactors())
  static const int BLEND_CUSTOM = 6;

  /// Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
  static const int BLEND_CUSTOM_SEPARATE = 7;
}

/// Gesture
/// NOTE: Provided as bit-wise flags to enable only desired gestures
abstract class Gesture {
  /// No gesture
  static const int GESTURE_NONE = 0;

  /// Tap gesture
  static const int GESTURE_TAP = 1;

  /// Double tap gesture
  static const int GESTURE_DOUBLETAP = 2;

  /// Hold gesture
  static const int GESTURE_HOLD = 4;

  /// Drag gesture
  static const int GESTURE_DRAG = 8;

  /// Swipe right gesture
  static const int GESTURE_SWIPE_RIGHT = 16;

  /// Swipe left gesture
  static const int GESTURE_SWIPE_LEFT = 32;

  /// Swipe up gesture
  static const int GESTURE_SWIPE_UP = 64;

  /// Swipe down gesture
  static const int GESTURE_SWIPE_DOWN = 128;

  /// Pinch in gesture
  static const int GESTURE_PINCH_IN = 256;

  /// Pinch out gesture
  static const int GESTURE_PINCH_OUT = 512;
}

/// Camera system modes
abstract class CameraMode {
  /// Custom camera
  static const int CAMERA_CUSTOM = 0;

  /// Free camera
  static const int CAMERA_FREE = 1;

  /// Orbital camera
  static const int CAMERA_ORBITAL = 2;

  /// First person camera
  static const int CAMERA_FIRST_PERSON = 3;

  /// Third person camera
  static const int CAMERA_THIRD_PERSON = 4;
}

/// Camera projection
abstract class CameraProjection {
  /// Perspective projection
  static const int CAMERA_PERSPECTIVE = 0;

  /// Orthographic projection
  static const int CAMERA_ORTHOGRAPHIC = 1;
}

/// N-patch layout
abstract class NPatchLayout {
  /// Npatch layout: 3x3 tiles
  static const int NPATCH_NINE_PATCH = 0;

  /// Npatch layout: 1x3 tiles
  static const int NPATCH_THREE_PATCH_VERTICAL = 1;

  /// Npatch layout: 3x1 tiles
  static const int NPATCH_THREE_PATCH_HORIZONTAL = 2;
}

/// RenderTexture2D, same as RenderTexture
typedef RLRenderTexture2D = RLRenderTexture;
typedef RLCamera = RLCamera3D;

/// Callbacks to hook some internal functions
/// WARNING: These callbacks are intended for advance users
typedef TraceLogCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int logLevel, ffi.Pointer<ffi.Char> text,
            ffi.Pointer<va_list_tag> args)>>;

final class va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef LoadFileDataCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.UnsignedChar> Function(
            ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Int> dataSize)>>;
typedef SaveFileDataCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Pointer<ffi.Char> fileName,
            ffi.Pointer<ffi.Void> data, ffi.Int dataSize)>>;
typedef LoadFileTextCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> fileName)>>;
typedef SaveFileTextCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Char> text)>>;

/// TextureCubemap, same as Texture
typedef RLTextureCubemap = RLTexture;

/// ------------------------------------------------------------------------------------
/// Audio Loading and Playing Functions (Module: audio)
/// ------------------------------------------------------------------------------------
typedef AudioCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> bufferData, ffi.UnsignedInt frames)>>;

const int RAYLIB_VERSION_MAJOR = 5;

const int RAYLIB_VERSION_MINOR = 0;

const int RAYLIB_VERSION_PATCH = 0;

const String RAYLIB_VERSION = '5.0';

const double PI = 3.1415927410125732;

const double DEG2RAD = 0.01745329238474369;

const double RAD2DEG = 57.2957763671875;

const int true1 = 1;

const int false1 = 0;

const int MOUSE_LEFT_BUTTON = 0;

const int MOUSE_RIGHT_BUTTON = 1;

const int MOUSE_MIDDLE_BUTTON = 2;

const int MATERIAL_MAP_DIFFUSE = 0;

const int MATERIAL_MAP_SPECULAR = 1;

const int SHADER_LOC_MAP_DIFFUSE = 15;

const int SHADER_LOC_MAP_SPECULAR = 16;
